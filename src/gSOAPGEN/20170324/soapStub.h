/* soapStub.h
   Generated by gSOAP 2.8.14 from rdlite.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"urn:rdLite"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20814
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns2__TagValue
#define SOAP_TYPE_ns2__TagValue (11)
/* ns2:TagValue */
class SOAP_CMAC ns2__TagValue
{
public:
	unsigned int id;	/* required element of type xsd:unsignedInt */
	LONG64 time;	/* required element of type xsd:long */
	std::string *value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns2__TagValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__TagValue() { ns2__TagValue::soap_default(NULL); }
	virtual ~ns2__TagValue() { }
};
#endif

#ifndef SOAP_TYPE_ns2__TagValueArray
#define SOAP_TYPE_ns2__TagValueArray (12)
/* ns2:TagValueArray */
class SOAP_CMAC ns2__TagValueArray
{
public:
	int error;	/* required element of type xsd:int */
	std::vector<ns2__TagValue * >item;	/* optional element of type ns2:TagValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns2__TagValueArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__TagValueArray() { ns2__TagValueArray::soap_default(NULL); }
	virtual ~ns2__TagValueArray() { }
};
#endif

#ifndef SOAP_TYPE_ns2__TagIdArray
#define SOAP_TYPE_ns2__TagIdArray (13)
/* ns2:TagIdArray */
class SOAP_CMAC ns2__TagIdArray
{
public:
	std::vector<int >item;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns2__TagIdArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__TagIdArray() { ns2__TagIdArray::soap_default(NULL); }
	virtual ~ns2__TagIdArray() { }
};
#endif

#ifndef SOAP_TYPE_ns2__CreateSubscriptionResponse
#define SOAP_TYPE_ns2__CreateSubscriptionResponse (23)
/* ns2:CreateSubscriptionResponse */
struct ns2__CreateSubscriptionResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns2__CreateSubscriptionResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__CreateSubscription
#define SOAP_TYPE_ns2__CreateSubscription (24)
/* ns2:CreateSubscription */
struct ns2__CreateSubscription
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
public:
	int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns2__CreateSubscription */
};
#endif

#ifndef SOAP_TYPE_ns2__AddSubscriptionItemResponse
#define SOAP_TYPE_ns2__AddSubscriptionItemResponse (27)
/* ns2:AddSubscriptionItemResponse */
struct ns2__AddSubscriptionItemResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns2__AddSubscriptionItemResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__AddSubscriptionItem
#define SOAP_TYPE_ns2__AddSubscriptionItem (28)
/* ns2:AddSubscriptionItem */
struct ns2__AddSubscriptionItem
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	int subId;	/* required element of type xsd:int */
	ns2__TagIdArray *tagId;	/* optional element of type ns2:TagIdArray */
public:
	int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns2__AddSubscriptionItem */
};
#endif

#ifndef SOAP_TYPE_ns2__RefreshSubscriptionResponse
#define SOAP_TYPE_ns2__RefreshSubscriptionResponse (29)
/* ns2:RefreshSubscriptionResponse */
struct ns2__RefreshSubscriptionResponse
{
public:
	ns2__TagValueArray *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:TagValueArray */
public:
	int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns2__RefreshSubscriptionResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__RefreshSubscription
#define SOAP_TYPE_ns2__RefreshSubscription (33)
/* ns2:RefreshSubscription */
struct ns2__RefreshSubscription
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	int subId;	/* required element of type xsd:int */
public:
	int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns2__RefreshSubscription */
};
#endif

#ifndef SOAP_TYPE_ns2__RemoveSubscriptionResponse
#define SOAP_TYPE_ns2__RemoveSubscriptionResponse (35)
/* ns2:RemoveSubscriptionResponse */
struct ns2__RemoveSubscriptionResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns2__RemoveSubscriptionResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__RemoveSubscription
#define SOAP_TYPE_ns2__RemoveSubscription (36)
/* ns2:RemoveSubscription */
struct ns2__RemoveSubscription
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	int subId;	/* required element of type xsd:int */
public:
	int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns2__RemoveSubscription */
};
#endif

#ifndef SOAP_TYPE_ns2__ReadResponse
#define SOAP_TYPE_ns2__ReadResponse (37)
/* ns2:ReadResponse */
struct ns2__ReadResponse
{
public:
	ns2__TagValueArray *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:TagValueArray */
public:
	int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ns2__ReadResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__Read
#define SOAP_TYPE_ns2__Read (40)
/* ns2:Read */
struct ns2__Read
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	ns2__TagIdArray *tagId;	/* optional element of type ns2:TagIdArray */
public:
	int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns2__Read */
};
#endif

#ifndef SOAP_TYPE_ns2__QueryResponse
#define SOAP_TYPE_ns2__QueryResponse (41)
/* ns2:QueryResponse */
struct ns2__QueryResponse
{
public:
	ns2__TagValueArray *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:TagValueArray */
public:
	int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns2__QueryResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__Query
#define SOAP_TYPE_ns2__Query (46)
/* ns2:Query */
struct ns2__Query
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	ns2__TagIdArray *tagId;	/* optional element of type ns2:TagIdArray */
	unsigned char valueType;	/* required element of type xsd:unsignedByte */
	LONG64 beginTime;	/* required element of type xsd:long */
	LONG64 endTime;	/* required element of type xsd:long */
	unsigned short count;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns2__Query */
};
#endif

#ifndef SOAP_TYPE_ns2__SetTagResponse
#define SOAP_TYPE_ns2__SetTagResponse (48)
/* ns2:SetTagResponse */
struct ns2__SetTagResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns2__SetTagResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__SetTag
#define SOAP_TYPE_ns2__SetTag (49)
/* ns2:SetTag */
struct ns2__SetTag
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	unsigned int id;	/* required element of type xsd:unsignedInt */
	unsigned short metaId;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns2__SetTag */
};
#endif

#ifndef SOAP_TYPE_ns2__EnableTagResponse
#define SOAP_TYPE_ns2__EnableTagResponse (52)
/* ns2:EnableTagResponse */
struct ns2__EnableTagResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns2__EnableTagResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__EnableTag
#define SOAP_TYPE_ns2__EnableTag (53)
/* ns2:EnableTag */
struct ns2__EnableTag
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	unsigned int id;	/* required element of type xsd:unsignedInt */
	bool enable;	/* required element of type xsd:boolean */
public:
	int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns2__EnableTag */
};
#endif

#ifndef SOAP_TYPE_ns2__SetMetaResponse
#define SOAP_TYPE_ns2__SetMetaResponse (55)
/* ns2:SetMetaResponse */
struct ns2__SetMetaResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns2__SetMetaResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__SetMeta
#define SOAP_TYPE_ns2__SetMeta (56)
/* ns2:SetMeta */
struct ns2__SetMeta
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	unsigned short id;	/* required element of type xsd:unsignedShort */
	int index;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	int dataLen;	/* required element of type xsd:int */
	bool isValue;	/* required element of type xsd:boolean */
	bool isAlarm;	/* required element of type xsd:boolean */
public:
	int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns2__SetMeta */
};
#endif

#ifndef SOAP_TYPE_ns2__RemvoeMetaResponse
#define SOAP_TYPE_ns2__RemvoeMetaResponse (58)
/* ns2:RemvoeMetaResponse */
struct ns2__RemvoeMetaResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns2__RemvoeMetaResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__RemvoeMeta
#define SOAP_TYPE_ns2__RemvoeMeta (59)
/* ns2:RemvoeMeta */
struct ns2__RemvoeMeta
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	unsigned short id;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns2__RemvoeMeta */
};
#endif

#ifndef SOAP_TYPE_ns2__SetStationResponse
#define SOAP_TYPE_ns2__SetStationResponse (61)
/* ns2:SetStationResponse */
struct ns2__SetStationResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns2__SetStationResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__SetStation
#define SOAP_TYPE_ns2__SetStation (62)
/* ns2:SetStation */
struct ns2__SetStation
{
public:
	unsigned char id;	/* required element of type xsd:unsignedByte */
	std::string name;	/* required element of type xsd:string */
	bool isScada;	/* required element of type xsd:boolean */
	std::string recvHost;	/* required element of type xsd:string */
	unsigned short recvPort;	/* required element of type xsd:unsignedShort */
	std::string syncHost;	/* required element of type xsd:string */
	unsigned short syncPort;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns2__SetStation */
};
#endif

#ifndef SOAP_TYPE_ns2__EnableStationResponse
#define SOAP_TYPE_ns2__EnableStationResponse (64)
/* ns2:EnableStationResponse */
struct ns2__EnableStationResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns2__EnableStationResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__EnableStation
#define SOAP_TYPE_ns2__EnableStation (65)
/* ns2:EnableStation */
struct ns2__EnableStation
{
public:
	unsigned char id;	/* required element of type xsd:unsignedByte */
	bool enabled;	/* required element of type xsd:boolean */
public:
	int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns2__EnableStation */
};
#endif

#ifndef SOAP_TYPE_ns2__RemoveStationResponse
#define SOAP_TYPE_ns2__RemoveStationResponse (67)
/* ns2:RemoveStationResponse */
struct ns2__RemoveStationResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns2__RemoveStationResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__RemoveStation
#define SOAP_TYPE_ns2__RemoveStation (68)
/* ns2:RemoveStation */
struct ns2__RemoveStation
{
public:
	unsigned char id;	/* required element of type xsd:unsignedByte */
public:
	int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns2__RemoveStation */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (69)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 69; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (70)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 70; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (72)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 72; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (75)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 75; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (76)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 76; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (10)
typedef unsigned char xsd__unsignedByte;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
