/* rdlite.h
   Generated by wsdl2h 2.8.14 from rdlite.wsdl and typemap.dat
   2017-03-24 02:00:49 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on rdlite.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri/rdservice?wsdl                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri/rdservice?wsdl"
ns2 = "urn:rdLite"

*/

#define SOAP_NAMESPACE_OF_ns2	"urn:rdLite"
//gsoap ns2   schema namespace:	urn:rdLite
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns2__TagValue.
class ns2__TagValue;

//  Forward declaration of class ns2__TagValueArray.
class ns2__TagValueArray;

//  Forward declaration of class ns2__TagIdArray.
class ns2__TagIdArray;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:rdLite                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:rdLite                                                               *
 *                                                                            *
\******************************************************************************/


/// "urn:rdLite":TagValue is a complexType.
/// class ns2__TagValue operations:
/// - soap_new_ns2__TagValue(soap*) allocate
/// - soap_new_ns2__TagValue(soap*, int num) allocate array
/// - soap_new_req_ns2__TagValue(soap*, ...) allocate, set required members
/// - soap_new_set_ns2__TagValue(soap*, ...) allocate, set all public members
/// - int soap_read_ns2__TagValue(soap*, ns2__TagValue*) deserialize from a stream
/// - int soap_write_ns2__TagValue(soap, ns2__TagValue*) serialize to a stream
class ns2__TagValue
{ public:
/// Element id of type xs:unsignedInt.
    unsigned int                         id                             1;	///< Required element.
/// Element time of type xs:long.
    LONG64                               time                           1;	///< Required element.
/// Element value of type xs:string.
    std::string*                         value                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:rdLite":TagValueArray is a complexType.
/// class ns2__TagValueArray operations:
/// - soap_new_ns2__TagValueArray(soap*) allocate
/// - soap_new_ns2__TagValueArray(soap*, int num) allocate array
/// - soap_new_req_ns2__TagValueArray(soap*, ...) allocate, set required members
/// - soap_new_set_ns2__TagValueArray(soap*, ...) allocate, set all public members
/// - int soap_read_ns2__TagValueArray(soap*, ns2__TagValueArray*) deserialize from a stream
/// - int soap_write_ns2__TagValueArray(soap, ns2__TagValueArray*) serialize to a stream
class ns2__TagValueArray
{ public:
/// Element error of type xs:int.
    int                                  error                          1;	///< Required element.
/// Vector of ns2__TagValue* with length 0..unbounded
    std::vector<ns2__TagValue*         > item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:rdLite":TagIdArray is a complexType.
/// class ns2__TagIdArray operations:
/// - soap_new_ns2__TagIdArray(soap*) allocate
/// - soap_new_ns2__TagIdArray(soap*, int num) allocate array
/// - soap_new_req_ns2__TagIdArray(soap*, ...) allocate, set required members
/// - soap_new_set_ns2__TagIdArray(soap*, ...) allocate, set all public members
/// - int soap_read_ns2__TagIdArray(soap*, ns2__TagIdArray*) deserialize from a stream
/// - int soap_write_ns2__TagIdArray(soap, ns2__TagIdArray*) serialize to a stream
class ns2__TagIdArray
{ public:
/// Vector of int with length 0..unbounded
    std::vector<int                    > item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:rdLite                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:rdLite                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns2  service name:	rdlite 
//gsoap ns2  service type:	rdlitePortType 
//gsoap ns2  service port:	http://tempuri/rdservice 
//gsoap ns2  service namespace:	urn:rdLite 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage rdlite Definitions

@section rdlite_bindings Service Bindings

  - @ref rdlite

@section rdlite_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page rdlite Binding "rdlite"

@section rdlite_service Service Documentation "rdlite"
gSOAP 2.8.40 generated service definition

@section rdlite_operations Operations of Binding  "rdlite"

  - @ref ns2__Read

  - @ref ns2__Query

@section rdlite_ports Endpoints of Binding  "rdlite"

  - http://tempuri/rdservice

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   rdlite                                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__Read                                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__ReadResponse" of operation "ns2__Read"
struct ns2__ReadResponse
{
    ns2__TagValueArray*                 result;
};

/// Operation "ns2__Read" of service binding "rdlite"

/**

Operation details:
Service definition of function ns__Read

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__Read(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__unsignedByte                   stationId,
    ns2__TagIdArray*                    tagId,
    // output parameters:
    struct ns2__ReadResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__Read(
    struct soap *soap,
    // input parameters:
    xsd__unsignedByte                   stationId,
    ns2__TagIdArray*                    tagId,
    // output parameters:
    struct ns2__ReadResponse&
  );
@endcode

C++ proxy class (defined in soaprdliteProxy.h):
@code
  class rdliteProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprdliteService.h):
@code
  class rdliteService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	Read SOAP
//gsoap ns2  service method-style:	Read rpc
//gsoap ns2  service method-encoding:	Read http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	Read ""
//gsoap ns2  service method-output-action:	Read Response
int ns2__Read(
    xsd__unsignedByte                   stationId,	///< Input parameter
    ns2__TagIdArray*                    tagId,	///< Input parameter
    struct ns2__ReadResponse           &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__Query                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__QueryResponse" of operation "ns2__Query"
struct ns2__QueryResponse
{
    ns2__TagValueArray*                 result;
};

/// Operation "ns2__Query" of service binding "rdlite"

/**

Operation details:
Service definition of function ns__Query

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__Query(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__unsignedByte                   stationId,
    ns2__TagIdArray*                    tagId,
    xsd__unsignedByte                   valueType,
    LONG64                              beginTime,
    LONG64                              endTime,
    unsigned short                      count,
    // output parameters:
    struct ns2__QueryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__Query(
    struct soap *soap,
    // input parameters:
    xsd__unsignedByte                   stationId,
    ns2__TagIdArray*                    tagId,
    xsd__unsignedByte                   valueType,
    LONG64                              beginTime,
    LONG64                              endTime,
    unsigned short                      count,
    // output parameters:
    struct ns2__QueryResponse&
  );
@endcode

C++ proxy class (defined in soaprdliteProxy.h):
@code
  class rdliteProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprdliteService.h):
@code
  class rdliteService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	Query SOAP
//gsoap ns2  service method-style:	Query rpc
//gsoap ns2  service method-encoding:	Query http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	Query ""
//gsoap ns2  service method-output-action:	Query Response
int ns2__Query(
    xsd__unsignedByte                   stationId,	///< Input parameter
    ns2__TagIdArray*                    tagId,	///< Input parameter
    xsd__unsignedByte                   valueType,	///< Input parameter
    LONG64                              beginTime,	///< Input parameter
    LONG64                              endTime,	///< Input parameter
    unsigned short                      count,	///< Input parameter
    struct ns2__QueryResponse          &	///< Output response struct parameter
);

/**

@page rdlite Binding "rdlite"

@section rdlite_policy_enablers Policy Enablers of Binding  "rdlite"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns2 Top-level root elements of schema "urn:rdLite"

*/

/* End of rdlite.h */
