/* ortC.cpp
   Generated by gSOAP 2.8.14 from rdlite.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "ortH.h"

SOAP_SOURCE_STAMP("@(#) ortC.cpp ver 2.8.14 2017-03-24 02:05:13 GMT")


SOAP_FMAC3 void * SOAP_FMAC4 ort_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TagValue:
		return (void*)soap_instantiate_ns2__TagValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TagValueArray:
		return (void*)soap_instantiate_ns2__TagValueArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TagIdArray:
		return (void*)soap_instantiate_ns2__TagIdArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ReadResponse:
		return (void*)soap_instantiate_ns2__ReadResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Read:
		return (void*)soap_instantiate_ns2__Read(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__QueryResponse:
		return (void*)soap_instantiate_ns2__QueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Query:
		return (void*)soap_instantiate_ns2__Query(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 ort_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__TagValue:
		if (p->size < 0)
			SOAP_DELETE((ns2__TagValue*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__TagValue*)p->ptr);
		break;
	case SOAP_TYPE_ns2__TagValueArray:
		if (p->size < 0)
			SOAP_DELETE((ns2__TagValueArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__TagValueArray*)p->ptr);
		break;
	case SOAP_TYPE_ns2__TagIdArray:
		if (p->size < 0)
			SOAP_DELETE((ns2__TagIdArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__TagIdArray*)p->ptr);
		break;
	case SOAP_TYPE_ns2__ReadResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__ReadResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__ReadResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__Read:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__Read*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__Read*)p->ptr);
		break;
	case SOAP_TYPE_ns2__QueryResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__QueryResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__QueryResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__Query:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__Query*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__Query*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns2__TagValue * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns2__TagValue * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns2__TagIdArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfint(soap, &this->ns2__TagIdArray::item);
	/* transient soap skipped */
}

void ns2__TagIdArray::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfint(soap, &this->ns2__TagIdArray::item);
	/* transient soap skipped */
#endif
}

int ns2__TagIdArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TagIdArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagIdArray(struct soap *soap, const char *tag, int id, const ns2__TagIdArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TagIdArray), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "item", -1, &(a->ns2__TagIdArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__TagIdArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__TagIdArray(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TagIdArray * SOAP_FMAC4 soap_in_ns2__TagIdArray(struct soap *soap, const char *tag, ns2__TagIdArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TagIdArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TagIdArray, sizeof(ns2__TagIdArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__TagIdArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__TagIdArray *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "item", &(a->ns2__TagIdArray::item), "xsd:int"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__TagIdArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TagIdArray, 0, sizeof(ns2__TagIdArray), 0, soap_copy_ns2__TagIdArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns2__TagIdArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__TagIdArray);
	if (this->soap_out(soap, tag?tag:"ns2:TagIdArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TagIdArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TagIdArray(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TagIdArray * SOAP_FMAC4 soap_get_ns2__TagIdArray(struct soap *soap, ns2__TagIdArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TagIdArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__TagIdArray * SOAP_FMAC2 soap_instantiate_ns2__TagIdArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TagIdArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__TagIdArray, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__TagIdArray);
		if (size)
			*size = sizeof(ns2__TagIdArray);
		((ns2__TagIdArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__TagIdArray, n);
		if (size)
			*size = n * sizeof(ns2__TagIdArray);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__TagIdArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__TagIdArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagIdArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__TagIdArray %p -> %p\n", q, p));
	*(ns2__TagIdArray*)p = *(ns2__TagIdArray*)q;
}

void ns2__TagValueArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns2__TagValueArray::error);
	soap_default_std__vectorTemplateOfPointerTons2__TagValue(soap, &this->ns2__TagValueArray::item);
	/* transient soap skipped */
}

void ns2__TagValueArray::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons2__TagValue(soap, &this->ns2__TagValueArray::item);
	/* transient soap skipped */
#endif
}

int ns2__TagValueArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TagValueArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagValueArray(struct soap *soap, const char *tag, int id, const ns2__TagValueArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TagValueArray), type))
		return soap->error;
	if (soap_out_int(soap, "error", -1, &(a->ns2__TagValueArray::error), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons2__TagValue(soap, "item", -1, &(a->ns2__TagValueArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__TagValueArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__TagValueArray(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TagValueArray * SOAP_FMAC4 soap_in_ns2__TagValueArray(struct soap *soap, const char *tag, ns2__TagValueArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TagValueArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TagValueArray, sizeof(ns2__TagValueArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__TagValueArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__TagValueArray *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_error1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_error1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "error", &(a->ns2__TagValueArray::error), "xsd:int"))
				{	soap_flag_error1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__TagValue(soap, "item", &(a->ns2__TagValueArray::item), "ns2:TagValue"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__TagValueArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TagValueArray, 0, sizeof(ns2__TagValueArray), 0, soap_copy_ns2__TagValueArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_error1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns2__TagValueArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__TagValueArray);
	if (this->soap_out(soap, tag?tag:"ns2:TagValueArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TagValueArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TagValueArray(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TagValueArray * SOAP_FMAC4 soap_get_ns2__TagValueArray(struct soap *soap, ns2__TagValueArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TagValueArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__TagValueArray * SOAP_FMAC2 soap_instantiate_ns2__TagValueArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TagValueArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__TagValueArray, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__TagValueArray);
		if (size)
			*size = sizeof(ns2__TagValueArray);
		((ns2__TagValueArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__TagValueArray, n);
		if (size)
			*size = n * sizeof(ns2__TagValueArray);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__TagValueArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__TagValueArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagValueArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__TagValueArray %p -> %p\n", q, p));
	*(ns2__TagValueArray*)p = *(ns2__TagValueArray*)q;
}

void ns2__TagValue::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns2__TagValue::id);
	soap_default_LONG64(soap, &this->ns2__TagValue::time);
	this->ns2__TagValue::value = NULL;
	/* transient soap skipped */
}

void ns2__TagValue::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns2__TagValue::value);
	/* transient soap skipped */
#endif
}

int ns2__TagValue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TagValue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagValue(struct soap *soap, const char *tag, int id, const ns2__TagValue *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TagValue), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "id", -1, &(a->ns2__TagValue::id), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "time", -1, &(a->ns2__TagValue::time), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "value", -1, &(a->ns2__TagValue::value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__TagValue::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__TagValue(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TagValue * SOAP_FMAC4 soap_in_ns2__TagValue(struct soap *soap, const char *tag, ns2__TagValue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TagValue *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TagValue, sizeof(ns2__TagValue), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__TagValue)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__TagValue *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_time1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "id", &(a->ns2__TagValue::id), "xsd:unsignedInt"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "time", &(a->ns2__TagValue::time), "xsd:long"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "value", &(a->ns2__TagValue::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__TagValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TagValue, 0, sizeof(ns2__TagValue), 0, soap_copy_ns2__TagValue);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_time1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns2__TagValue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__TagValue);
	if (this->soap_out(soap, tag?tag:"ns2:TagValue", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TagValue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TagValue(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TagValue * SOAP_FMAC4 soap_get_ns2__TagValue(struct soap *soap, ns2__TagValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TagValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__TagValue * SOAP_FMAC2 soap_instantiate_ns2__TagValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TagValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__TagValue, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__TagValue);
		if (size)
			*size = sizeof(ns2__TagValue);
		((ns2__TagValue*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__TagValue, n);
		if (size)
			*size = n * sizeof(ns2__TagValue);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__TagValue*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__TagValue*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__TagValue %p -> %p\n", q, p));
	*(ns2__TagValue*)p = *(ns2__TagValue*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Query(struct soap *soap, struct ns2__Query *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	a->tagId = NULL;
	soap_default_xsd__unsignedByte(soap, &a->valueType);
	soap_default_LONG64(soap, &a->beginTime);
	soap_default_LONG64(soap, &a->endTime);
	soap_default_unsignedShort(soap, &a->count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Query(struct soap *soap, const struct ns2__Query *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagIdArray(soap, &a->tagId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Query(struct soap *soap, const char *tag, int id, const struct ns2__Query *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Query), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_PointerTons2__TagIdArray(soap, "tagId", -1, &a->tagId, ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "valueType", -1, &a->valueType, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "beginTime", -1, &a->beginTime, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "endTime", -1, &a->endTime, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "count", -1, &a->count, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Query * SOAP_FMAC4 soap_in_ns2__Query(struct soap *soap, const char *tag, struct ns2__Query *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_tagId = 1;
	size_t soap_flag_valueType = 1;
	size_t soap_flag_beginTime = 1;
	size_t soap_flag_endTime = 1;
	size_t soap_flag_count = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Query *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Query, sizeof(struct ns2__Query), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Query(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_tagId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagIdArray(soap, "tagId", &a->tagId, "ns2:TagIdArray"))
				{	soap_flag_tagId--;
					continue;
				}
			if (soap_flag_valueType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "valueType", &a->valueType, "xsd:unsignedByte"))
				{	soap_flag_valueType--;
					continue;
				}
			if (soap_flag_beginTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "beginTime", &a->beginTime, "xsd:long"))
				{	soap_flag_beginTime--;
					continue;
				}
			if (soap_flag_endTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "endTime", &a->endTime, "xsd:long"))
				{	soap_flag_endTime--;
					continue;
				}
			if (soap_flag_count && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "count", &a->count, "xsd:unsignedShort"))
				{	soap_flag_count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Query *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Query, 0, sizeof(struct ns2__Query), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_valueType > 0 || soap_flag_beginTime > 0 || soap_flag_endTime > 0 || soap_flag_count > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Query(struct soap *soap, const struct ns2__Query *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Query);
	if (soap_out_ns2__Query(soap, tag?tag:"ns2:Query", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Query * SOAP_FMAC4 soap_get_ns2__Query(struct soap *soap, struct ns2__Query *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Query(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__Query * SOAP_FMAC2 soap_instantiate_ns2__Query(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Query(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Query, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__Query);
		if (size)
			*size = sizeof(struct ns2__Query);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__Query, n);
		if (size)
			*size = n * sizeof(struct ns2__Query);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__Query*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Query(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__Query %p -> %p\n", q, p));
	*(struct ns2__Query*)p = *(struct ns2__Query*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryResponse(struct soap *soap, struct ns2__QueryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryResponse(struct soap *soap, const struct ns2__QueryResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagValueArray(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryResponse(struct soap *soap, const char *tag, int id, const struct ns2__QueryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__TagValueArray(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryResponse * SOAP_FMAC4 soap_in_ns2__QueryResponse(struct soap *soap, const char *tag, struct ns2__QueryResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryResponse, sizeof(struct ns2__QueryResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagValueArray(soap, "result", &a->result, "ns2:TagValueArray"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryResponse, 0, sizeof(struct ns2__QueryResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryResponse(struct soap *soap, const struct ns2__QueryResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryResponse);
	if (soap_out_ns2__QueryResponse(soap, tag?tag:"ns2:QueryResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__QueryResponse * SOAP_FMAC4 soap_get_ns2__QueryResponse(struct soap *soap, struct ns2__QueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__QueryResponse * SOAP_FMAC2 soap_instantiate_ns2__QueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryResponse, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__QueryResponse);
		if (size)
			*size = sizeof(struct ns2__QueryResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__QueryResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__QueryResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__QueryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryResponse %p -> %p\n", q, p));
	*(struct ns2__QueryResponse*)p = *(struct ns2__QueryResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Read(struct soap *soap, struct ns2__Read *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	a->tagId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Read(struct soap *soap, const struct ns2__Read *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagIdArray(soap, &a->tagId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Read(struct soap *soap, const char *tag, int id, const struct ns2__Read *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Read), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_PointerTons2__TagIdArray(soap, "tagId", -1, &a->tagId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Read * SOAP_FMAC4 soap_in_ns2__Read(struct soap *soap, const char *tag, struct ns2__Read *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_tagId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Read *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Read, sizeof(struct ns2__Read), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Read(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_tagId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagIdArray(soap, "tagId", &a->tagId, "ns2:TagIdArray"))
				{	soap_flag_tagId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Read *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Read, 0, sizeof(struct ns2__Read), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Read(struct soap *soap, const struct ns2__Read *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Read);
	if (soap_out_ns2__Read(soap, tag?tag:"ns2:Read", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Read * SOAP_FMAC4 soap_get_ns2__Read(struct soap *soap, struct ns2__Read *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Read(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__Read * SOAP_FMAC2 soap_instantiate_ns2__Read(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Read(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Read, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__Read);
		if (size)
			*size = sizeof(struct ns2__Read);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__Read, n);
		if (size)
			*size = n * sizeof(struct ns2__Read);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__Read*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Read(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__Read %p -> %p\n", q, p));
	*(struct ns2__Read*)p = *(struct ns2__Read*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ReadResponse(struct soap *soap, struct ns2__ReadResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ReadResponse(struct soap *soap, const struct ns2__ReadResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagValueArray(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReadResponse(struct soap *soap, const char *tag, int id, const struct ns2__ReadResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ReadResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__TagValueArray(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ReadResponse * SOAP_FMAC4 soap_in_ns2__ReadResponse(struct soap *soap, const char *tag, struct ns2__ReadResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ReadResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ReadResponse, sizeof(struct ns2__ReadResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ReadResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagValueArray(soap, "result", &a->result, "ns2:TagValueArray"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__ReadResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ReadResponse, 0, sizeof(struct ns2__ReadResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReadResponse(struct soap *soap, const struct ns2__ReadResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__ReadResponse);
	if (soap_out_ns2__ReadResponse(soap, tag?tag:"ns2:ReadResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ReadResponse * SOAP_FMAC4 soap_get_ns2__ReadResponse(struct soap *soap, struct ns2__ReadResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ReadResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__ReadResponse * SOAP_FMAC2 soap_instantiate_ns2__ReadResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ReadResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__ReadResponse, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__ReadResponse);
		if (size)
			*size = sizeof(struct ns2__ReadResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__ReadResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__ReadResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__ReadResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReadResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__ReadResponse %p -> %p\n", q, p));
	*(struct ns2__ReadResponse*)p = *(struct ns2__ReadResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Query(struct soap *soap, struct ns2__Query *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__Query))
		soap_serialize_ns2__Query(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Query(struct soap *soap, const char *tag, int id, struct ns2__Query *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__Query);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__Query(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__Query ** SOAP_FMAC4 soap_in_PointerTons2__Query(struct soap *soap, const char *tag, struct ns2__Query **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__Query **)soap_malloc(soap, sizeof(struct ns2__Query *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__Query(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__Query **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__Query, sizeof(struct ns2__Query), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Query(struct soap *soap, struct ns2__Query *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__Query);
	if (soap_out_PointerTons2__Query(soap, tag?tag:"ns2:Query", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Query ** SOAP_FMAC4 soap_get_PointerTons2__Query(struct soap *soap, struct ns2__Query **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__Query(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__QueryResponse(struct soap *soap, struct ns2__QueryResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__QueryResponse))
		soap_serialize_ns2__QueryResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__QueryResponse(struct soap *soap, const char *tag, int id, struct ns2__QueryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__QueryResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__QueryResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__QueryResponse ** SOAP_FMAC4 soap_in_PointerTons2__QueryResponse(struct soap *soap, const char *tag, struct ns2__QueryResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__QueryResponse **)soap_malloc(soap, sizeof(struct ns2__QueryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__QueryResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__QueryResponse, sizeof(struct ns2__QueryResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__QueryResponse(struct soap *soap, struct ns2__QueryResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__QueryResponse);
	if (soap_out_PointerTons2__QueryResponse(soap, tag?tag:"ns2:QueryResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__QueryResponse ** SOAP_FMAC4 soap_get_PointerTons2__QueryResponse(struct soap *soap, struct ns2__QueryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__QueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Read(struct soap *soap, struct ns2__Read *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__Read))
		soap_serialize_ns2__Read(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Read(struct soap *soap, const char *tag, int id, struct ns2__Read *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__Read);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__Read(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__Read ** SOAP_FMAC4 soap_in_PointerTons2__Read(struct soap *soap, const char *tag, struct ns2__Read **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__Read **)soap_malloc(soap, sizeof(struct ns2__Read *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__Read(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__Read **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__Read, sizeof(struct ns2__Read), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Read(struct soap *soap, struct ns2__Read *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__Read);
	if (soap_out_PointerTons2__Read(soap, tag?tag:"ns2:Read", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Read ** SOAP_FMAC4 soap_get_PointerTons2__Read(struct soap *soap, struct ns2__Read **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__Read(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReadResponse(struct soap *soap, struct ns2__ReadResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__ReadResponse))
		soap_serialize_ns2__ReadResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReadResponse(struct soap *soap, const char *tag, int id, struct ns2__ReadResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__ReadResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__ReadResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns2__ReadResponse ** SOAP_FMAC4 soap_in_PointerTons2__ReadResponse(struct soap *soap, const char *tag, struct ns2__ReadResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns2__ReadResponse **)soap_malloc(soap, sizeof(struct ns2__ReadResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__ReadResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns2__ReadResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__ReadResponse, sizeof(struct ns2__ReadResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReadResponse(struct soap *soap, struct ns2__ReadResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__ReadResponse);
	if (soap_out_PointerTons2__ReadResponse(soap, tag?tag:"ns2:ReadResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ReadResponse ** SOAP_FMAC4 soap_get_PointerTons2__ReadResponse(struct soap *soap, struct ns2__ReadResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__ReadResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagIdArray(struct soap *soap, ns2__TagIdArray *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TagIdArray))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagIdArray(struct soap *soap, const char *tag, int id, ns2__TagIdArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TagIdArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__TagIdArray ** SOAP_FMAC4 soap_in_PointerTons2__TagIdArray(struct soap *soap, const char *tag, ns2__TagIdArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TagIdArray **)soap_malloc(soap, sizeof(ns2__TagIdArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TagIdArray *)soap_instantiate_ns2__TagIdArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__TagIdArray ** p = (ns2__TagIdArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TagIdArray, sizeof(ns2__TagIdArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagIdArray(struct soap *soap, ns2__TagIdArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__TagIdArray);
	if (soap_out_PointerTons2__TagIdArray(soap, tag?tag:"ns2:TagIdArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TagIdArray ** SOAP_FMAC4 soap_get_PointerTons2__TagIdArray(struct soap *soap, ns2__TagIdArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TagIdArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagValueArray(struct soap *soap, ns2__TagValueArray *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TagValueArray))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagValueArray(struct soap *soap, const char *tag, int id, ns2__TagValueArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TagValueArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__TagValueArray ** SOAP_FMAC4 soap_in_PointerTons2__TagValueArray(struct soap *soap, const char *tag, ns2__TagValueArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TagValueArray **)soap_malloc(soap, sizeof(ns2__TagValueArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TagValueArray *)soap_instantiate_ns2__TagValueArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__TagValueArray ** p = (ns2__TagValueArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TagValueArray, sizeof(ns2__TagValueArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagValueArray(struct soap *soap, ns2__TagValueArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__TagValueArray);
	if (soap_out_PointerTons2__TagValueArray(soap, tag?tag:"ns2:TagValueArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TagValueArray ** SOAP_FMAC4 soap_get_PointerTons2__TagValueArray(struct soap *soap, ns2__TagValueArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TagValueArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagValue(struct soap *soap, ns2__TagValue *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TagValue))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagValue(struct soap *soap, const char *tag, int id, ns2__TagValue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TagValue);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__TagValue ** SOAP_FMAC4 soap_in_PointerTons2__TagValue(struct soap *soap, const char *tag, ns2__TagValue **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TagValue **)soap_malloc(soap, sizeof(ns2__TagValue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TagValue *)soap_instantiate_ns2__TagValue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__TagValue ** p = (ns2__TagValue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TagValue, sizeof(ns2__TagValue), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagValue(struct soap *soap, ns2__TagValue *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__TagValue);
	if (soap_out_PointerTons2__TagValue(soap, tag?tag:"ns2:TagValue", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TagValue ** SOAP_FMAC4 soap_get_PointerTons2__TagValue(struct soap *soap, ns2__TagValue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TagValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	int n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else if (!soap_in_int(soap, tag, &n, "xsd:int"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<int >, n);
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, std::vector<ns2__TagValue * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, const std::vector<ns2__TagValue * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns2__TagValue * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons2__TagValue(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, const char *tag, int id, const std::vector<ns2__TagValue * >*a, const char *type)
{
	for (std::vector<ns2__TagValue * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons2__TagValue(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns2__TagValue * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, const char *tag, std::vector<ns2__TagValue * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns2__TagValue *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns2__TagValue, SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue, sizeof(ns2__TagValue), 1))
				break;
			if (!soap_in_PointerTons2__TagValue(soap, tag, NULL, "ns2:TagValue"))
				break;
		}
		else if (!soap_in_PointerTons2__TagValue(soap, tag, &n, "ns2:TagValue"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons2__TagValue(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns2__TagValue * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue, n, ort_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns2__TagValue * >);
		if (size)
			*size = sizeof(std::vector<ns2__TagValue * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns2__TagValue * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns2__TagValue * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns2__TagValue * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns2__TagValue * > %p -> %p\n", q, p));
	*(std::vector<ns2__TagValue * >*)p = *(std::vector<ns2__TagValue * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of ortC.cpp */
