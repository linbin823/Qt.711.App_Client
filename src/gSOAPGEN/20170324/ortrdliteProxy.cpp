/* ortrdliteProxy.cpp
   Generated by gSOAP 2.8.14 from rdlite.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "ortrdliteProxy.h"

rdliteProxy::rdliteProxy()
{	rdliteProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

rdliteProxy::rdliteProxy(const struct soap &_soap) : soap(_soap)
{ }

rdliteProxy::rdliteProxy(const char *url)
{	rdliteProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

rdliteProxy::rdliteProxy(soap_mode iomode)
{	rdliteProxy_init(iomode, iomode);
}

rdliteProxy::rdliteProxy(const char *url, soap_mode iomode)
{	rdliteProxy_init(iomode, iomode);
	soap_endpoint = url;
}

rdliteProxy::rdliteProxy(soap_mode imode, soap_mode omode)
{	rdliteProxy_init(imode, omode);
}

rdliteProxy::~rdliteProxy()
{ }

void rdliteProxy::rdliteProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "urn:rdLite", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void rdliteProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void rdliteProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	rdliteProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void rdliteProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *rdliteProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *rdliteProxy::soap_fault()
{	return this->fault;
}

const char *rdliteProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *rdliteProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int rdliteProxy::soap_close_socket()
{	return soap_closesock(this);
}

int rdliteProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void rdliteProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void rdliteProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *rdliteProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int rdliteProxy::Read(const char *endpoint, const char *soap_action, unsigned char stationId, ns2__TagIdArray *tagId, struct ns2__ReadResponse &_param_1)
{	struct soap *soap = this;
	struct ns2__Read soap_tmp_ns2__Read;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://tempuri/rdservice";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__Read.stationId = stationId;
	soap_tmp_ns2__Read.tagId = tagId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__Read(soap, &soap_tmp_ns2__Read);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__Read(soap, &soap_tmp_ns2__Read, "ns2:Read", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__Read(soap, &soap_tmp_ns2__Read, "ns2:Read", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns2__ReadResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns2__ReadResponse(soap, &_param_1, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int rdliteProxy::Query(const char *endpoint, const char *soap_action, unsigned char stationId, ns2__TagIdArray *tagId, unsigned char valueType, LONG64 beginTime, LONG64 endTime, unsigned short count, struct ns2__QueryResponse &_param_2)
{	struct soap *soap = this;
	struct ns2__Query soap_tmp_ns2__Query;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://tempuri/rdservice";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__Query.stationId = stationId;
	soap_tmp_ns2__Query.tagId = tagId;
	soap_tmp_ns2__Query.valueType = valueType;
	soap_tmp_ns2__Query.beginTime = beginTime;
	soap_tmp_ns2__Query.endTime = endTime;
	soap_tmp_ns2__Query.count = count;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__Query(soap, &soap_tmp_ns2__Query);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__Query(soap, &soap_tmp_ns2__Query, "ns2:Query", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__Query(soap, &soap_tmp_ns2__Query, "ns2:Query", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns2__QueryResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns2__QueryResponse(soap, &_param_2, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
