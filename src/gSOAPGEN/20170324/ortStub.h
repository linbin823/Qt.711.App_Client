/* ortStub.h
   Generated by gSOAP 2.8.14 from rdlite.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef ortStub_H
#define ortStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"urn:rdLite"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20814
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns2__TagValue
#define SOAP_TYPE_ns2__TagValue (12)
/* ns2:TagValue */
class SOAP_CMAC ns2__TagValue
{
public:
	unsigned int id;	/* required element of type xsd:unsignedInt */
	LONG64 time;	/* required element of type xsd:long */
	std::string *value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns2__TagValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__TagValue() { ns2__TagValue::soap_default(NULL); }
	virtual ~ns2__TagValue() { }
};
#endif

#ifndef SOAP_TYPE_ns2__TagValueArray
#define SOAP_TYPE_ns2__TagValueArray (14)
/* ns2:TagValueArray */
class SOAP_CMAC ns2__TagValueArray
{
public:
	int error;	/* required element of type xsd:int */
	std::vector<ns2__TagValue * >item;	/* optional element of type ns2:TagValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns2__TagValueArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__TagValueArray() { ns2__TagValueArray::soap_default(NULL); }
	virtual ~ns2__TagValueArray() { }
};
#endif

#ifndef SOAP_TYPE_ns2__TagIdArray
#define SOAP_TYPE_ns2__TagIdArray (16)
/* ns2:TagIdArray */
class SOAP_CMAC ns2__TagIdArray
{
public:
	std::vector<int >item;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns2__TagIdArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__TagIdArray() { ns2__TagIdArray::soap_default(NULL); }
	virtual ~ns2__TagIdArray() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ReadResponse
#define SOAP_TYPE_ns2__ReadResponse (23)
/* ns2:ReadResponse */
struct ns2__ReadResponse
{
public:
	ns2__TagValueArray *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:TagValueArray */
public:
	int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns2__ReadResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__Read
#define SOAP_TYPE_ns2__Read (27)
/* ns2:Read */
struct ns2__Read
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	ns2__TagIdArray *tagId;	/* optional element of type ns2:TagIdArray */
public:
	int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns2__Read */
};
#endif

#ifndef SOAP_TYPE_ns2__QueryResponse
#define SOAP_TYPE_ns2__QueryResponse (29)
/* ns2:QueryResponse */
struct ns2__QueryResponse
{
public:
	ns2__TagValueArray *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:TagValueArray */
public:
	int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns2__QueryResponse */
};
#endif

#ifndef SOAP_TYPE_ns2__Query
#define SOAP_TYPE_ns2__Query (35)
/* ns2:Query */
struct ns2__Query
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	ns2__TagIdArray *tagId;	/* optional element of type ns2:TagIdArray */
	unsigned char valueType;	/* required element of type xsd:unsignedByte */
	LONG64 beginTime;	/* required element of type xsd:long */
	LONG64 endTime;	/* required element of type xsd:long */
	unsigned short count;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns2__Query */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (7)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (11)
typedef unsigned char xsd__unsignedByte;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of ortStub.h */
