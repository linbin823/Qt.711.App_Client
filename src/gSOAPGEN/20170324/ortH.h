/* ortH.h
   Generated by gSOAP 2.8.14 from rdlite.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef ortH_H
#define ortH_H
#include "ortStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 void * SOAP_FMAC4 ort_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 ort_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 ort_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_short
#define SOAP_TYPE_short (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_begin(soap), soap_serialize_short(soap, data), soap_begin_send(soap) || soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

SOAP_FMAC1 void SOAP_FMAC2 soap_default_int(struct soap*, int*);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_int(struct soap*, const char*, int, const int*, const char*);
SOAP_FMAC1 int* SOAP_FMAC2 soap_in_int(struct soap*, const char*, int*, const char*);

#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_begin(soap), soap_serialize_LONG64(soap, data), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (11)
#endif

#define soap_default_xsd__unsignedByte(soap, a) soap_default_unsignedByte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_xsd__unsignedByte
#define soap_write_xsd__unsignedByte(soap, data) ( soap_begin(soap), soap_serialize_xsd__unsignedByte(soap, data), soap_begin_send(soap) || soap_put_xsd__unsignedByte(soap, data, "xsd:unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_xsd__unsignedByte
#define soap_read_xsd__unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_begin(soap), soap_serialize_unsignedByte(soap, data), soap_begin_send(soap) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedShort
#define SOAP_TYPE_unsignedShort (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

#ifndef soap_write_unsignedShort
#define soap_write_unsignedShort(soap, data) ( soap_begin(soap), soap_serialize_unsignedShort(soap, data), soap_begin_send(soap) || soap_put_unsignedShort(soap, data, "unsignedShort", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

#ifndef soap_read_unsignedShort
#define soap_read_unsignedShort(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_begin(soap), soap_serialize_unsignedInt(soap, data), soap_begin_send(soap) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_begin(soap), soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TagIdArray
#define SOAP_TYPE_ns2__TagIdArray (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagIdArray(struct soap*, const char*, int, const ns2__TagIdArray *, const char*);
SOAP_FMAC3 ns2__TagIdArray * SOAP_FMAC4 soap_in_ns2__TagIdArray(struct soap*, const char*, ns2__TagIdArray *, const char*);

#ifndef soap_write_ns2__TagIdArray
#define soap_write_ns2__TagIdArray(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:TagIdArray", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__TagIdArray * SOAP_FMAC4 soap_get_ns2__TagIdArray(struct soap*, ns2__TagIdArray *, const char*, const char*);

#ifndef soap_read_ns2__TagIdArray
#define soap_read_ns2__TagIdArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TagIdArray(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__TagIdArray * SOAP_FMAC2 soap_instantiate_ns2__TagIdArray(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TagIdArray * soap_new_ns2__TagIdArray(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TagIdArray(soap, n, NULL, NULL, NULL); }

inline ns2__TagIdArray * soap_new_req_ns2__TagIdArray(struct soap *soap) { ns2__TagIdArray *_p = soap_instantiate_ns2__TagIdArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__TagIdArray * soap_new_set_ns2__TagIdArray(struct soap *soap, std::vector<int >& item) { ns2__TagIdArray *_p = soap_instantiate_ns2__TagIdArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TagIdArray::item = item; } return _p; }

inline void soap_delete_ns2__TagIdArray(struct soap *soap, ns2__TagIdArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagIdArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TagValueArray
#define SOAP_TYPE_ns2__TagValueArray (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagValueArray(struct soap*, const char*, int, const ns2__TagValueArray *, const char*);
SOAP_FMAC3 ns2__TagValueArray * SOAP_FMAC4 soap_in_ns2__TagValueArray(struct soap*, const char*, ns2__TagValueArray *, const char*);

#ifndef soap_write_ns2__TagValueArray
#define soap_write_ns2__TagValueArray(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:TagValueArray", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__TagValueArray * SOAP_FMAC4 soap_get_ns2__TagValueArray(struct soap*, ns2__TagValueArray *, const char*, const char*);

#ifndef soap_read_ns2__TagValueArray
#define soap_read_ns2__TagValueArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TagValueArray(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__TagValueArray * SOAP_FMAC2 soap_instantiate_ns2__TagValueArray(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TagValueArray * soap_new_ns2__TagValueArray(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TagValueArray(soap, n, NULL, NULL, NULL); }

inline ns2__TagValueArray * soap_new_req_ns2__TagValueArray(struct soap *soap, int error) { ns2__TagValueArray *_p = soap_instantiate_ns2__TagValueArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TagValueArray::error = error; } return _p; }

inline ns2__TagValueArray * soap_new_set_ns2__TagValueArray(struct soap *soap, int error, std::vector<ns2__TagValue * >& item) { ns2__TagValueArray *_p = soap_instantiate_ns2__TagValueArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TagValueArray::error = error; _p->ns2__TagValueArray::item = item; } return _p; }

inline void soap_delete_ns2__TagValueArray(struct soap *soap, ns2__TagValueArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagValueArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__TagValue
#define SOAP_TYPE_ns2__TagValue (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagValue(struct soap*, const char*, int, const ns2__TagValue *, const char*);
SOAP_FMAC3 ns2__TagValue * SOAP_FMAC4 soap_in_ns2__TagValue(struct soap*, const char*, ns2__TagValue *, const char*);

#ifndef soap_write_ns2__TagValue
#define soap_write_ns2__TagValue(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:TagValue", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__TagValue * SOAP_FMAC4 soap_get_ns2__TagValue(struct soap*, ns2__TagValue *, const char*, const char*);

#ifndef soap_read_ns2__TagValue
#define soap_read_ns2__TagValue(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TagValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__TagValue * SOAP_FMAC2 soap_instantiate_ns2__TagValue(struct soap*, int, const char*, const char*, size_t*);

inline ns2__TagValue * soap_new_ns2__TagValue(struct soap *soap, int n = -1) { return soap_instantiate_ns2__TagValue(soap, n, NULL, NULL, NULL); }

inline ns2__TagValue * soap_new_req_ns2__TagValue(struct soap *soap, unsigned int id, LONG64 time) { ns2__TagValue *_p = soap_instantiate_ns2__TagValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TagValue::id = id; _p->ns2__TagValue::time = time; } return _p; }

inline ns2__TagValue * soap_new_set_ns2__TagValue(struct soap *soap, unsigned int id, LONG64 time, std::string *value) { ns2__TagValue *_p = soap_instantiate_ns2__TagValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__TagValue::id = id; _p->ns2__TagValue::time = time; _p->ns2__TagValue::value = value; } return _p; }

inline void soap_delete_ns2__TagValue(struct soap *soap, ns2__TagValue *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagValue(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Query
#define SOAP_TYPE_ns2__Query (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Query(struct soap*, struct ns2__Query *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Query(struct soap*, const struct ns2__Query *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Query(struct soap*, const char*, int, const struct ns2__Query *, const char*);
SOAP_FMAC3 struct ns2__Query * SOAP_FMAC4 soap_in_ns2__Query(struct soap*, const char*, struct ns2__Query *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Query(struct soap*, const struct ns2__Query *, const char*, const char*);

#ifndef soap_write_ns2__Query
#define soap_write_ns2__Query(soap, data) ( soap_begin(soap), soap_serialize_ns2__Query(soap, data), soap_begin_send(soap) || soap_put_ns2__Query(soap, data, "ns2:Query", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__Query * SOAP_FMAC4 soap_get_ns2__Query(struct soap*, struct ns2__Query *, const char*, const char*);

#ifndef soap_read_ns2__Query
#define soap_read_ns2__Query(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Query(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns2__Query * SOAP_FMAC2 soap_instantiate_ns2__Query(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__Query * soap_new_ns2__Query(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Query(soap, n, NULL, NULL, NULL); }

inline struct ns2__Query * soap_new_req_ns2__Query(struct soap *soap, unsigned char stationId, unsigned char valueType, LONG64 beginTime, LONG64 endTime, unsigned short count) { struct ns2__Query *_p = soap_instantiate_ns2__Query(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__Query(soap, _p); _p->stationId = stationId; _p->valueType = valueType; _p->beginTime = beginTime; _p->endTime = endTime; _p->count = count; } return _p; }

inline struct ns2__Query * soap_new_set_ns2__Query(struct soap *soap, unsigned char stationId, ns2__TagIdArray *tagId, unsigned char valueType, LONG64 beginTime, LONG64 endTime, unsigned short count) { struct ns2__Query *_p = soap_instantiate_ns2__Query(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__Query(soap, _p); _p->stationId = stationId; _p->tagId = tagId; _p->valueType = valueType; _p->beginTime = beginTime; _p->endTime = endTime; _p->count = count; } return _p; }

inline void soap_delete_ns2__Query(struct soap *soap, struct ns2__Query *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Query(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__QueryResponse
#define SOAP_TYPE_ns2__QueryResponse (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryResponse(struct soap*, struct ns2__QueryResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryResponse(struct soap*, const struct ns2__QueryResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryResponse(struct soap*, const char*, int, const struct ns2__QueryResponse *, const char*);
SOAP_FMAC3 struct ns2__QueryResponse * SOAP_FMAC4 soap_in_ns2__QueryResponse(struct soap*, const char*, struct ns2__QueryResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryResponse(struct soap*, const struct ns2__QueryResponse *, const char*, const char*);

#ifndef soap_write_ns2__QueryResponse
#define soap_write_ns2__QueryResponse(soap, data) ( soap_begin(soap), soap_serialize_ns2__QueryResponse(soap, data), soap_begin_send(soap) || soap_put_ns2__QueryResponse(soap, data, "ns2:QueryResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__QueryResponse * SOAP_FMAC4 soap_get_ns2__QueryResponse(struct soap*, struct ns2__QueryResponse *, const char*, const char*);

#ifndef soap_read_ns2__QueryResponse
#define soap_read_ns2__QueryResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__QueryResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns2__QueryResponse * SOAP_FMAC2 soap_instantiate_ns2__QueryResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__QueryResponse * soap_new_ns2__QueryResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns2__QueryResponse(soap, n, NULL, NULL, NULL); }

inline struct ns2__QueryResponse * soap_new_req_ns2__QueryResponse(struct soap *soap) { struct ns2__QueryResponse *_p = soap_instantiate_ns2__QueryResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__QueryResponse(soap, _p); } return _p; }

inline struct ns2__QueryResponse * soap_new_set_ns2__QueryResponse(struct soap *soap, ns2__TagValueArray *result) { struct ns2__QueryResponse *_p = soap_instantiate_ns2__QueryResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__QueryResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns2__QueryResponse(struct soap *soap, struct ns2__QueryResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Read
#define SOAP_TYPE_ns2__Read (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Read(struct soap*, struct ns2__Read *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Read(struct soap*, const struct ns2__Read *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Read(struct soap*, const char*, int, const struct ns2__Read *, const char*);
SOAP_FMAC3 struct ns2__Read * SOAP_FMAC4 soap_in_ns2__Read(struct soap*, const char*, struct ns2__Read *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Read(struct soap*, const struct ns2__Read *, const char*, const char*);

#ifndef soap_write_ns2__Read
#define soap_write_ns2__Read(soap, data) ( soap_begin(soap), soap_serialize_ns2__Read(soap, data), soap_begin_send(soap) || soap_put_ns2__Read(soap, data, "ns2:Read", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__Read * SOAP_FMAC4 soap_get_ns2__Read(struct soap*, struct ns2__Read *, const char*, const char*);

#ifndef soap_read_ns2__Read
#define soap_read_ns2__Read(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Read(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns2__Read * SOAP_FMAC2 soap_instantiate_ns2__Read(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__Read * soap_new_ns2__Read(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Read(soap, n, NULL, NULL, NULL); }

inline struct ns2__Read * soap_new_req_ns2__Read(struct soap *soap, unsigned char stationId) { struct ns2__Read *_p = soap_instantiate_ns2__Read(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__Read(soap, _p); _p->stationId = stationId; } return _p; }

inline struct ns2__Read * soap_new_set_ns2__Read(struct soap *soap, unsigned char stationId, ns2__TagIdArray *tagId) { struct ns2__Read *_p = soap_instantiate_ns2__Read(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__Read(soap, _p); _p->stationId = stationId; _p->tagId = tagId; } return _p; }

inline void soap_delete_ns2__Read(struct soap *soap, struct ns2__Read *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Read(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ReadResponse
#define SOAP_TYPE_ns2__ReadResponse (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ReadResponse(struct soap*, struct ns2__ReadResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ReadResponse(struct soap*, const struct ns2__ReadResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReadResponse(struct soap*, const char*, int, const struct ns2__ReadResponse *, const char*);
SOAP_FMAC3 struct ns2__ReadResponse * SOAP_FMAC4 soap_in_ns2__ReadResponse(struct soap*, const char*, struct ns2__ReadResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReadResponse(struct soap*, const struct ns2__ReadResponse *, const char*, const char*);

#ifndef soap_write_ns2__ReadResponse
#define soap_write_ns2__ReadResponse(soap, data) ( soap_begin(soap), soap_serialize_ns2__ReadResponse(soap, data), soap_begin_send(soap) || soap_put_ns2__ReadResponse(soap, data, "ns2:ReadResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__ReadResponse * SOAP_FMAC4 soap_get_ns2__ReadResponse(struct soap*, struct ns2__ReadResponse *, const char*, const char*);

#ifndef soap_read_ns2__ReadResponse
#define soap_read_ns2__ReadResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ReadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns2__ReadResponse * SOAP_FMAC2 soap_instantiate_ns2__ReadResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ReadResponse * soap_new_ns2__ReadResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ReadResponse(soap, n, NULL, NULL, NULL); }

inline struct ns2__ReadResponse * soap_new_req_ns2__ReadResponse(struct soap *soap) { struct ns2__ReadResponse *_p = soap_instantiate_ns2__ReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__ReadResponse(soap, _p); } return _p; }

inline struct ns2__ReadResponse * soap_new_set_ns2__ReadResponse(struct soap *soap, ns2__TagValueArray *result) { struct ns2__ReadResponse *_p = soap_instantiate_ns2__ReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__ReadResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns2__ReadResponse(struct soap *soap, struct ns2__ReadResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_PointerTons2__Query
#define SOAP_TYPE_PointerTons2__Query (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Query(struct soap*, struct ns2__Query *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Query(struct soap*, const char *, int, struct ns2__Query *const*, const char *);
SOAP_FMAC3 struct ns2__Query ** SOAP_FMAC4 soap_in_PointerTons2__Query(struct soap*, const char*, struct ns2__Query **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Query(struct soap*, struct ns2__Query *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Query
#define soap_write_PointerTons2__Query(soap, data) ( soap_begin(soap), soap_serialize_PointerTons2__Query(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Query(soap, data, "ns2:Query", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__Query ** SOAP_FMAC4 soap_get_PointerTons2__Query(struct soap*, struct ns2__Query **, const char*, const char*);

#ifndef soap_read_PointerTons2__Query
#define soap_read_PointerTons2__Query(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Query(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__QueryResponse
#define SOAP_TYPE_PointerTons2__QueryResponse (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__QueryResponse(struct soap*, struct ns2__QueryResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__QueryResponse(struct soap*, const char *, int, struct ns2__QueryResponse *const*, const char *);
SOAP_FMAC3 struct ns2__QueryResponse ** SOAP_FMAC4 soap_in_PointerTons2__QueryResponse(struct soap*, const char*, struct ns2__QueryResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__QueryResponse(struct soap*, struct ns2__QueryResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__QueryResponse
#define soap_write_PointerTons2__QueryResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons2__QueryResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__QueryResponse(soap, data, "ns2:QueryResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__QueryResponse ** SOAP_FMAC4 soap_get_PointerTons2__QueryResponse(struct soap*, struct ns2__QueryResponse **, const char*, const char*);

#ifndef soap_read_PointerTons2__QueryResponse
#define soap_read_PointerTons2__QueryResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__QueryResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Read
#define SOAP_TYPE_PointerTons2__Read (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Read(struct soap*, struct ns2__Read *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Read(struct soap*, const char *, int, struct ns2__Read *const*, const char *);
SOAP_FMAC3 struct ns2__Read ** SOAP_FMAC4 soap_in_PointerTons2__Read(struct soap*, const char*, struct ns2__Read **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Read(struct soap*, struct ns2__Read *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Read
#define soap_write_PointerTons2__Read(soap, data) ( soap_begin(soap), soap_serialize_PointerTons2__Read(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Read(soap, data, "ns2:Read", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__Read ** SOAP_FMAC4 soap_get_PointerTons2__Read(struct soap*, struct ns2__Read **, const char*, const char*);

#ifndef soap_read_PointerTons2__Read
#define soap_read_PointerTons2__Read(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Read(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ReadResponse
#define SOAP_TYPE_PointerTons2__ReadResponse (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ReadResponse(struct soap*, struct ns2__ReadResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ReadResponse(struct soap*, const char *, int, struct ns2__ReadResponse *const*, const char *);
SOAP_FMAC3 struct ns2__ReadResponse ** SOAP_FMAC4 soap_in_PointerTons2__ReadResponse(struct soap*, const char*, struct ns2__ReadResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ReadResponse(struct soap*, struct ns2__ReadResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ReadResponse
#define soap_write_PointerTons2__ReadResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons2__ReadResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__ReadResponse(soap, data, "ns2:ReadResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns2__ReadResponse ** SOAP_FMAC4 soap_get_PointerTons2__ReadResponse(struct soap*, struct ns2__ReadResponse **, const char*, const char*);

#ifndef soap_read_PointerTons2__ReadResponse
#define soap_read_PointerTons2__ReadResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ReadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_begin(soap), soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TagIdArray
#define SOAP_TYPE_PointerTons2__TagIdArray (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagIdArray(struct soap*, ns2__TagIdArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagIdArray(struct soap*, const char *, int, ns2__TagIdArray *const*, const char *);
SOAP_FMAC3 ns2__TagIdArray ** SOAP_FMAC4 soap_in_PointerTons2__TagIdArray(struct soap*, const char*, ns2__TagIdArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagIdArray(struct soap*, ns2__TagIdArray *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TagIdArray
#define soap_write_PointerTons2__TagIdArray(soap, data) ( soap_begin(soap), soap_serialize_PointerTons2__TagIdArray(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__TagIdArray(soap, data, "ns2:TagIdArray", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__TagIdArray ** SOAP_FMAC4 soap_get_PointerTons2__TagIdArray(struct soap*, ns2__TagIdArray **, const char*, const char*);

#ifndef soap_read_PointerTons2__TagIdArray
#define soap_read_PointerTons2__TagIdArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TagIdArray(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TagValueArray
#define SOAP_TYPE_PointerTons2__TagValueArray (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagValueArray(struct soap*, ns2__TagValueArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagValueArray(struct soap*, const char *, int, ns2__TagValueArray *const*, const char *);
SOAP_FMAC3 ns2__TagValueArray ** SOAP_FMAC4 soap_in_PointerTons2__TagValueArray(struct soap*, const char*, ns2__TagValueArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagValueArray(struct soap*, ns2__TagValueArray *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TagValueArray
#define soap_write_PointerTons2__TagValueArray(soap, data) ( soap_begin(soap), soap_serialize_PointerTons2__TagValueArray(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__TagValueArray(soap, data, "ns2:TagValueArray", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__TagValueArray ** SOAP_FMAC4 soap_get_PointerTons2__TagValueArray(struct soap*, ns2__TagValueArray **, const char*, const char*);

#ifndef soap_read_PointerTons2__TagValueArray
#define soap_read_PointerTons2__TagValueArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TagValueArray(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__TagValue
#define SOAP_TYPE_PointerTons2__TagValue (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagValue(struct soap*, ns2__TagValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagValue(struct soap*, const char *, int, ns2__TagValue *const*, const char *);
SOAP_FMAC3 ns2__TagValue ** SOAP_FMAC4 soap_in_PointerTons2__TagValue(struct soap*, const char*, ns2__TagValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagValue(struct soap*, ns2__TagValue *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__TagValue
#define soap_write_PointerTons2__TagValue(soap, data) ( soap_begin(soap), soap_serialize_PointerTons2__TagValue(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__TagValue(soap, data, "ns2:TagValue", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__TagValue ** SOAP_FMAC4 soap_get_PointerTons2__TagValue(struct soap*, ns2__TagValue **, const char*, const char*);

#ifndef soap_read_PointerTons2__TagValue
#define soap_read_PointerTons2__TagValue(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__TagValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (5)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int >*, const char*);
SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int >*, const char*);
SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int > * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TagValue(struct soap*, std::vector<ns2__TagValue * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TagValue(struct soap*, const std::vector<ns2__TagValue * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TagValue(struct soap*, const char*, int, const std::vector<ns2__TagValue * >*, const char*);
SOAP_FMAC3 std::vector<ns2__TagValue * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TagValue(struct soap*, const char*, std::vector<ns2__TagValue * >*, const char*);
SOAP_FMAC1 std::vector<ns2__TagValue * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__TagValue * > * soap_new_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, std::vector<ns2__TagValue * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__TagValue(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of ortH.h */
