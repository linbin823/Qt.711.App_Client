/* soaprdbserviceSoapProxy.h
   Generated by gSOAP 2.8.14 from ss.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soaprdbserviceSoapProxy_H
#define soaprdbserviceSoapProxy_H
#include "soapH.h"

class SOAP_CMAC rdbserviceSoapProxy : public soap
{ public:
	/// Endpoint URL of service 'rdbserviceSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	rdbserviceSoapProxy();
	/// Construct from another engine state
	rdbserviceSoapProxy(const struct soap&);
	/// Constructor with endpoint URL
	rdbserviceSoapProxy(const char *url);
	/// Constructor with engine input+output mode control
	rdbserviceSoapProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	rdbserviceSoapProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	rdbserviceSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~rdbserviceSoapProxy();
	/// Initializer used by constructors
	virtual	void rdbserviceSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'HelloWorld2' (returns error code or SOAP_OK)
	virtual	int HelloWorld2(_ns1__HelloWorld2 *ns1__HelloWorld2, _ns1__HelloWorld2Response *ns1__HelloWorld2Response) { return this->HelloWorld2(NULL, NULL, ns1__HelloWorld2, ns1__HelloWorld2Response); }
	virtual	int HelloWorld2(const char *endpoint, const char *soap_action, _ns1__HelloWorld2 *ns1__HelloWorld2, _ns1__HelloWorld2Response *ns1__HelloWorld2Response);

	/// Web service operation 'HelloWorld' (returns error code or SOAP_OK)
	virtual	int HelloWorld(_ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse *ns1__HelloWorldResponse) { return this->HelloWorld(NULL, NULL, ns1__HelloWorld, ns1__HelloWorldResponse); }
	virtual	int HelloWorld(const char *endpoint, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse *ns1__HelloWorldResponse);

	/// Web service operation 'GetSum' (returns error code or SOAP_OK)
	virtual	int GetSum(_ns1__GetSum *ns1__GetSum, _ns1__GetSumResponse *ns1__GetSumResponse) { return this->GetSum(NULL, NULL, ns1__GetSum, ns1__GetSumResponse); }
	virtual	int GetSum(const char *endpoint, const char *soap_action, _ns1__GetSum *ns1__GetSum, _ns1__GetSumResponse *ns1__GetSumResponse);

	/// Web service operation 'HelloWorld2' (returns error code or SOAP_OK)
	virtual	int HelloWorld2_(_ns1__HelloWorld2 *ns1__HelloWorld2, _ns1__HelloWorld2Response *ns1__HelloWorld2Response) { return this->HelloWorld2_(NULL, NULL, ns1__HelloWorld2, ns1__HelloWorld2Response); }
	virtual	int HelloWorld2_(const char *endpoint, const char *soap_action, _ns1__HelloWorld2 *ns1__HelloWorld2, _ns1__HelloWorld2Response *ns1__HelloWorld2Response);

	/// Web service operation 'HelloWorld' (returns error code or SOAP_OK)
	virtual	int HelloWorld_(_ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse *ns1__HelloWorldResponse) { return this->HelloWorld_(NULL, NULL, ns1__HelloWorld, ns1__HelloWorldResponse); }
	virtual	int HelloWorld_(const char *endpoint, const char *soap_action, _ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse *ns1__HelloWorldResponse);

	/// Web service operation 'GetSum' (returns error code or SOAP_OK)
	virtual	int GetSum_(_ns1__GetSum *ns1__GetSum, _ns1__GetSumResponse *ns1__GetSumResponse) { return this->GetSum_(NULL, NULL, ns1__GetSum, ns1__GetSumResponse); }
	virtual	int GetSum_(const char *endpoint, const char *soap_action, _ns1__GetSum *ns1__GetSum, _ns1__GetSumResponse *ns1__GetSumResponse);
};
#endif
