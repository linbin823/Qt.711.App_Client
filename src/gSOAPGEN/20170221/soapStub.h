/* soapStub.h
   Generated by gSOAP 2.8.14 from ss.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20814
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__HelloWorld2
#define SOAP_TYPE__ns1__HelloWorld2 (8)
/* ns1:HelloWorld2 */
class SOAP_CMAC _ns1__HelloWorld2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE__ns1__HelloWorld2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HelloWorld2() { _ns1__HelloWorld2::soap_default(NULL); }
	virtual ~_ns1__HelloWorld2() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__HelloWorld2Response
#define SOAP_TYPE__ns1__HelloWorld2Response (9)
/* ns1:HelloWorld2Response */
class SOAP_CMAC _ns1__HelloWorld2Response
{
public:
	std::string *HelloWorld2Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__ns1__HelloWorld2Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HelloWorld2Response() { _ns1__HelloWorld2Response::soap_default(NULL); }
	virtual ~_ns1__HelloWorld2Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1__HelloWorld
#define SOAP_TYPE__ns1__HelloWorld (10)
/* ns1:HelloWorld */
class SOAP_CMAC _ns1__HelloWorld
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__HelloWorld */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HelloWorld() { _ns1__HelloWorld::soap_default(NULL); }
	virtual ~_ns1__HelloWorld() { }
};
#endif

#ifndef SOAP_TYPE__ns1__HelloWorldResponse
#define SOAP_TYPE__ns1__HelloWorldResponse (11)
/* ns1:HelloWorldResponse */
class SOAP_CMAC _ns1__HelloWorldResponse
{
public:
	std::string *HelloWorldResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__HelloWorldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HelloWorldResponse() { _ns1__HelloWorldResponse::soap_default(NULL); }
	virtual ~_ns1__HelloWorldResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetSum
#define SOAP_TYPE__ns1__GetSum (12)
/* ns1:GetSum */
class SOAP_CMAC _ns1__GetSum
{
public:
	int a;	/* required element of type xsd:int */
	int b;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns1__GetSum */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSum() { _ns1__GetSum::soap_default(NULL); }
	virtual ~_ns1__GetSum() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetSumResponse
#define SOAP_TYPE__ns1__GetSumResponse (13)
/* ns1:GetSumResponse */
class SOAP_CMAC _ns1__GetSumResponse
{
public:
	int GetSumResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns1__GetSumResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetSumResponse() { _ns1__GetSumResponse::soap_default(NULL); }
	virtual ~_ns1__GetSumResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__HelloWorld2
#define SOAP_TYPE___ns1__HelloWorld2 (20)
/* Operation wrapper: */
struct __ns1__HelloWorld2
{
public:
	_ns1__HelloWorld2 *ns1__HelloWorld2;	/* optional element of type ns1:HelloWorld2 */
public:
	int soap_type() const { return 20; } /* = unique id SOAP_TYPE___ns1__HelloWorld2 */
};
#endif

#ifndef SOAP_TYPE___ns1__HelloWorld
#define SOAP_TYPE___ns1__HelloWorld (24)
/* Operation wrapper: */
struct __ns1__HelloWorld
{
public:
	_ns1__HelloWorld *ns1__HelloWorld;	/* optional element of type ns1:HelloWorld */
public:
	int soap_type() const { return 24; } /* = unique id SOAP_TYPE___ns1__HelloWorld */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSum
#define SOAP_TYPE___ns1__GetSum (28)
/* Operation wrapper: */
struct __ns1__GetSum
{
public:
	_ns1__GetSum *ns1__GetSum;	/* optional element of type ns1:GetSum */
public:
	int soap_type() const { return 28; } /* = unique id SOAP_TYPE___ns1__GetSum */
};
#endif

#ifndef SOAP_TYPE___ns1__HelloWorld2_
#define SOAP_TYPE___ns1__HelloWorld2_ (30)
/* Operation wrapper: */
struct __ns1__HelloWorld2_
{
public:
	_ns1__HelloWorld2 *ns1__HelloWorld2;	/* optional element of type ns1:HelloWorld2 */
public:
	int soap_type() const { return 30; } /* = unique id SOAP_TYPE___ns1__HelloWorld2_ */
};
#endif

#ifndef SOAP_TYPE___ns1__HelloWorld_
#define SOAP_TYPE___ns1__HelloWorld_ (32)
/* Operation wrapper: */
struct __ns1__HelloWorld_
{
public:
	_ns1__HelloWorld *ns1__HelloWorld;	/* optional element of type ns1:HelloWorld */
public:
	int soap_type() const { return 32; } /* = unique id SOAP_TYPE___ns1__HelloWorld_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSum_
#define SOAP_TYPE___ns1__GetSum_ (34)
/* Operation wrapper: */
struct __ns1__GetSum_
{
public:
	_ns1__GetSum *ns1__GetSum;	/* optional element of type ns1:GetSum */
public:
	int soap_type() const { return 34; } /* = unique id SOAP_TYPE___ns1__GetSum_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (35)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 35; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (36)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 36; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (38)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 38; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (41)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 41; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (42)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 42; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
