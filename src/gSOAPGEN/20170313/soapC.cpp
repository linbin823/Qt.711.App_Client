/* soapC.cpp
   Generated by gSOAP 2.8.14 from rdlite.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.14 2017-03-13 04:55:27 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns2__TagIdArray:
		return soap_in_ns2__TagIdArray(soap, NULL, NULL, "ns2:TagIdArray");
	case SOAP_TYPE_ns2__TagValueArray:
		return soap_in_ns2__TagValueArray(soap, NULL, NULL, "ns2:TagValueArray");
	case SOAP_TYPE_ns2__TagValue:
		return soap_in_ns2__TagValue(soap, NULL, NULL, "ns2:TagValue");
	case SOAP_TYPE_ns2__RemoveStation:
		return soap_in_ns2__RemoveStation(soap, NULL, NULL, "ns2:RemoveStation");
	case SOAP_TYPE_ns2__RemoveStationResponse:
		return soap_in_ns2__RemoveStationResponse(soap, NULL, NULL, "ns2:RemoveStationResponse");
	case SOAP_TYPE_ns2__EnableStation:
		return soap_in_ns2__EnableStation(soap, NULL, NULL, "ns2:EnableStation");
	case SOAP_TYPE_ns2__EnableStationResponse:
		return soap_in_ns2__EnableStationResponse(soap, NULL, NULL, "ns2:EnableStationResponse");
	case SOAP_TYPE_ns2__SetStation:
		return soap_in_ns2__SetStation(soap, NULL, NULL, "ns2:SetStation");
	case SOAP_TYPE_ns2__SetStationResponse:
		return soap_in_ns2__SetStationResponse(soap, NULL, NULL, "ns2:SetStationResponse");
	case SOAP_TYPE_ns2__RemvoeMeta:
		return soap_in_ns2__RemvoeMeta(soap, NULL, NULL, "ns2:RemvoeMeta");
	case SOAP_TYPE_ns2__RemvoeMetaResponse:
		return soap_in_ns2__RemvoeMetaResponse(soap, NULL, NULL, "ns2:RemvoeMetaResponse");
	case SOAP_TYPE_ns2__SetMeta:
		return soap_in_ns2__SetMeta(soap, NULL, NULL, "ns2:SetMeta");
	case SOAP_TYPE_ns2__SetMetaResponse:
		return soap_in_ns2__SetMetaResponse(soap, NULL, NULL, "ns2:SetMetaResponse");
	case SOAP_TYPE_ns2__EnableTag:
		return soap_in_ns2__EnableTag(soap, NULL, NULL, "ns2:EnableTag");
	case SOAP_TYPE_ns2__EnableTagResponse:
		return soap_in_ns2__EnableTagResponse(soap, NULL, NULL, "ns2:EnableTagResponse");
	case SOAP_TYPE_ns2__SetTag:
		return soap_in_ns2__SetTag(soap, NULL, NULL, "ns2:SetTag");
	case SOAP_TYPE_ns2__SetTagResponse:
		return soap_in_ns2__SetTagResponse(soap, NULL, NULL, "ns2:SetTagResponse");
	case SOAP_TYPE_ns2__Query:
		return soap_in_ns2__Query(soap, NULL, NULL, "ns2:Query");
	case SOAP_TYPE_ns2__QueryResponse:
		return soap_in_ns2__QueryResponse(soap, NULL, NULL, "ns2:QueryResponse");
	case SOAP_TYPE_ns2__Read:
		return soap_in_ns2__Read(soap, NULL, NULL, "ns2:Read");
	case SOAP_TYPE_ns2__ReadResponse:
		return soap_in_ns2__ReadResponse(soap, NULL, NULL, "ns2:ReadResponse");
	case SOAP_TYPE_ns2__RemoveSubscription:
		return soap_in_ns2__RemoveSubscription(soap, NULL, NULL, "ns2:RemoveSubscription");
	case SOAP_TYPE_ns2__RemoveSubscriptionResponse:
		return soap_in_ns2__RemoveSubscriptionResponse(soap, NULL, NULL, "ns2:RemoveSubscriptionResponse");
	case SOAP_TYPE_ns2__RefreshSubscription:
		return soap_in_ns2__RefreshSubscription(soap, NULL, NULL, "ns2:RefreshSubscription");
	case SOAP_TYPE_ns2__RefreshSubscriptionResponse:
		return soap_in_ns2__RefreshSubscriptionResponse(soap, NULL, NULL, "ns2:RefreshSubscriptionResponse");
	case SOAP_TYPE_ns2__AddSubscriptionItem:
		return soap_in_ns2__AddSubscriptionItem(soap, NULL, NULL, "ns2:AddSubscriptionItem");
	case SOAP_TYPE_ns2__AddSubscriptionItemResponse:
		return soap_in_ns2__AddSubscriptionItemResponse(soap, NULL, NULL, "ns2:AddSubscriptionItemResponse");
	case SOAP_TYPE_ns2__CreateSubscription:
		return soap_in_ns2__CreateSubscription(soap, NULL, NULL, "ns2:CreateSubscription");
	case SOAP_TYPE_ns2__CreateSubscriptionResponse:
		return soap_in_ns2__CreateSubscriptionResponse(soap, NULL, NULL, "ns2:CreateSubscriptionResponse");
	case SOAP_TYPE_PointerTons2__TagValueArray:
		return soap_in_PointerTons2__TagValueArray(soap, NULL, NULL, "ns2:TagValueArray");
	case SOAP_TYPE_PointerTons2__TagIdArray:
		return soap_in_PointerTons2__TagIdArray(soap, NULL, NULL, "ns2:TagIdArray");
	case SOAP_TYPE_PointerTons2__TagValue:
		return soap_in_PointerTons2__TagValue(soap, NULL, NULL, "ns2:TagValue");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:TagIdArray"))
		{	*type = SOAP_TYPE_ns2__TagIdArray;
			return soap_in_ns2__TagIdArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:TagValueArray"))
		{	*type = SOAP_TYPE_ns2__TagValueArray;
			return soap_in_ns2__TagValueArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:TagValue"))
		{	*type = SOAP_TYPE_ns2__TagValue;
			return soap_in_ns2__TagValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RemoveStation"))
		{	*type = SOAP_TYPE_ns2__RemoveStation;
			return soap_in_ns2__RemoveStation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RemoveStationResponse"))
		{	*type = SOAP_TYPE_ns2__RemoveStationResponse;
			return soap_in_ns2__RemoveStationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:EnableStation"))
		{	*type = SOAP_TYPE_ns2__EnableStation;
			return soap_in_ns2__EnableStation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:EnableStationResponse"))
		{	*type = SOAP_TYPE_ns2__EnableStationResponse;
			return soap_in_ns2__EnableStationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetStation"))
		{	*type = SOAP_TYPE_ns2__SetStation;
			return soap_in_ns2__SetStation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetStationResponse"))
		{	*type = SOAP_TYPE_ns2__SetStationResponse;
			return soap_in_ns2__SetStationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RemvoeMeta"))
		{	*type = SOAP_TYPE_ns2__RemvoeMeta;
			return soap_in_ns2__RemvoeMeta(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RemvoeMetaResponse"))
		{	*type = SOAP_TYPE_ns2__RemvoeMetaResponse;
			return soap_in_ns2__RemvoeMetaResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetMeta"))
		{	*type = SOAP_TYPE_ns2__SetMeta;
			return soap_in_ns2__SetMeta(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetMetaResponse"))
		{	*type = SOAP_TYPE_ns2__SetMetaResponse;
			return soap_in_ns2__SetMetaResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:EnableTag"))
		{	*type = SOAP_TYPE_ns2__EnableTag;
			return soap_in_ns2__EnableTag(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:EnableTagResponse"))
		{	*type = SOAP_TYPE_ns2__EnableTagResponse;
			return soap_in_ns2__EnableTagResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetTag"))
		{	*type = SOAP_TYPE_ns2__SetTag;
			return soap_in_ns2__SetTag(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetTagResponse"))
		{	*type = SOAP_TYPE_ns2__SetTagResponse;
			return soap_in_ns2__SetTagResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Query"))
		{	*type = SOAP_TYPE_ns2__Query;
			return soap_in_ns2__Query(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:QueryResponse"))
		{	*type = SOAP_TYPE_ns2__QueryResponse;
			return soap_in_ns2__QueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Read"))
		{	*type = SOAP_TYPE_ns2__Read;
			return soap_in_ns2__Read(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ReadResponse"))
		{	*type = SOAP_TYPE_ns2__ReadResponse;
			return soap_in_ns2__ReadResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RemoveSubscription"))
		{	*type = SOAP_TYPE_ns2__RemoveSubscription;
			return soap_in_ns2__RemoveSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RemoveSubscriptionResponse"))
		{	*type = SOAP_TYPE_ns2__RemoveSubscriptionResponse;
			return soap_in_ns2__RemoveSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RefreshSubscription"))
		{	*type = SOAP_TYPE_ns2__RefreshSubscription;
			return soap_in_ns2__RefreshSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RefreshSubscriptionResponse"))
		{	*type = SOAP_TYPE_ns2__RefreshSubscriptionResponse;
			return soap_in_ns2__RefreshSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:AddSubscriptionItem"))
		{	*type = SOAP_TYPE_ns2__AddSubscriptionItem;
			return soap_in_ns2__AddSubscriptionItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:AddSubscriptionItemResponse"))
		{	*type = SOAP_TYPE_ns2__AddSubscriptionItemResponse;
			return soap_in_ns2__AddSubscriptionItemResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:CreateSubscription"))
		{	*type = SOAP_TYPE_ns2__CreateSubscription;
			return soap_in_ns2__CreateSubscription(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:CreateSubscriptionResponse"))
		{	*type = SOAP_TYPE_ns2__CreateSubscriptionResponse;
			return soap_in_ns2__CreateSubscriptionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns2__TagIdArray:
		return ((ns2__TagIdArray *)ptr)->soap_out(soap, tag, id, "ns2:TagIdArray");
	case SOAP_TYPE_ns2__TagValueArray:
		return ((ns2__TagValueArray *)ptr)->soap_out(soap, tag, id, "ns2:TagValueArray");
	case SOAP_TYPE_ns2__TagValue:
		return ((ns2__TagValue *)ptr)->soap_out(soap, tag, id, "ns2:TagValue");
	case SOAP_TYPE_ns2__RemoveStation:
		return soap_out_ns2__RemoveStation(soap, tag, id, (const struct ns2__RemoveStation *)ptr, "ns2:RemoveStation");
	case SOAP_TYPE_ns2__RemoveStationResponse:
		return soap_out_ns2__RemoveStationResponse(soap, tag, id, (const struct ns2__RemoveStationResponse *)ptr, "ns2:RemoveStationResponse");
	case SOAP_TYPE_ns2__EnableStation:
		return soap_out_ns2__EnableStation(soap, tag, id, (const struct ns2__EnableStation *)ptr, "ns2:EnableStation");
	case SOAP_TYPE_ns2__EnableStationResponse:
		return soap_out_ns2__EnableStationResponse(soap, tag, id, (const struct ns2__EnableStationResponse *)ptr, "ns2:EnableStationResponse");
	case SOAP_TYPE_ns2__SetStation:
		return soap_out_ns2__SetStation(soap, tag, id, (const struct ns2__SetStation *)ptr, "ns2:SetStation");
	case SOAP_TYPE_ns2__SetStationResponse:
		return soap_out_ns2__SetStationResponse(soap, tag, id, (const struct ns2__SetStationResponse *)ptr, "ns2:SetStationResponse");
	case SOAP_TYPE_ns2__RemvoeMeta:
		return soap_out_ns2__RemvoeMeta(soap, tag, id, (const struct ns2__RemvoeMeta *)ptr, "ns2:RemvoeMeta");
	case SOAP_TYPE_ns2__RemvoeMetaResponse:
		return soap_out_ns2__RemvoeMetaResponse(soap, tag, id, (const struct ns2__RemvoeMetaResponse *)ptr, "ns2:RemvoeMetaResponse");
	case SOAP_TYPE_ns2__SetMeta:
		return soap_out_ns2__SetMeta(soap, tag, id, (const struct ns2__SetMeta *)ptr, "ns2:SetMeta");
	case SOAP_TYPE_ns2__SetMetaResponse:
		return soap_out_ns2__SetMetaResponse(soap, tag, id, (const struct ns2__SetMetaResponse *)ptr, "ns2:SetMetaResponse");
	case SOAP_TYPE_ns2__EnableTag:
		return soap_out_ns2__EnableTag(soap, tag, id, (const struct ns2__EnableTag *)ptr, "ns2:EnableTag");
	case SOAP_TYPE_ns2__EnableTagResponse:
		return soap_out_ns2__EnableTagResponse(soap, tag, id, (const struct ns2__EnableTagResponse *)ptr, "ns2:EnableTagResponse");
	case SOAP_TYPE_ns2__SetTag:
		return soap_out_ns2__SetTag(soap, tag, id, (const struct ns2__SetTag *)ptr, "ns2:SetTag");
	case SOAP_TYPE_ns2__SetTagResponse:
		return soap_out_ns2__SetTagResponse(soap, tag, id, (const struct ns2__SetTagResponse *)ptr, "ns2:SetTagResponse");
	case SOAP_TYPE_ns2__Query:
		return soap_out_ns2__Query(soap, tag, id, (const struct ns2__Query *)ptr, "ns2:Query");
	case SOAP_TYPE_ns2__QueryResponse:
		return soap_out_ns2__QueryResponse(soap, tag, id, (const struct ns2__QueryResponse *)ptr, "ns2:QueryResponse");
	case SOAP_TYPE_ns2__Read:
		return soap_out_ns2__Read(soap, tag, id, (const struct ns2__Read *)ptr, "ns2:Read");
	case SOAP_TYPE_ns2__ReadResponse:
		return soap_out_ns2__ReadResponse(soap, tag, id, (const struct ns2__ReadResponse *)ptr, "ns2:ReadResponse");
	case SOAP_TYPE_ns2__RemoveSubscription:
		return soap_out_ns2__RemoveSubscription(soap, tag, id, (const struct ns2__RemoveSubscription *)ptr, "ns2:RemoveSubscription");
	case SOAP_TYPE_ns2__RemoveSubscriptionResponse:
		return soap_out_ns2__RemoveSubscriptionResponse(soap, tag, id, (const struct ns2__RemoveSubscriptionResponse *)ptr, "ns2:RemoveSubscriptionResponse");
	case SOAP_TYPE_ns2__RefreshSubscription:
		return soap_out_ns2__RefreshSubscription(soap, tag, id, (const struct ns2__RefreshSubscription *)ptr, "ns2:RefreshSubscription");
	case SOAP_TYPE_ns2__RefreshSubscriptionResponse:
		return soap_out_ns2__RefreshSubscriptionResponse(soap, tag, id, (const struct ns2__RefreshSubscriptionResponse *)ptr, "ns2:RefreshSubscriptionResponse");
	case SOAP_TYPE_ns2__AddSubscriptionItem:
		return soap_out_ns2__AddSubscriptionItem(soap, tag, id, (const struct ns2__AddSubscriptionItem *)ptr, "ns2:AddSubscriptionItem");
	case SOAP_TYPE_ns2__AddSubscriptionItemResponse:
		return soap_out_ns2__AddSubscriptionItemResponse(soap, tag, id, (const struct ns2__AddSubscriptionItemResponse *)ptr, "ns2:AddSubscriptionItemResponse");
	case SOAP_TYPE_ns2__CreateSubscription:
		return soap_out_ns2__CreateSubscription(soap, tag, id, (const struct ns2__CreateSubscription *)ptr, "ns2:CreateSubscription");
	case SOAP_TYPE_ns2__CreateSubscriptionResponse:
		return soap_out_ns2__CreateSubscriptionResponse(soap, tag, id, (const struct ns2__CreateSubscriptionResponse *)ptr, "ns2:CreateSubscriptionResponse");
	case SOAP_TYPE_PointerTons2__TagValueArray:
		return soap_out_PointerTons2__TagValueArray(soap, tag, id, (ns2__TagValueArray *const*)ptr, "ns2:TagValueArray");
	case SOAP_TYPE_PointerTons2__TagIdArray:
		return soap_out_PointerTons2__TagIdArray(soap, tag, id, (ns2__TagIdArray *const*)ptr, "ns2:TagIdArray");
	case SOAP_TYPE_PointerTons2__TagValue:
		return soap_out_PointerTons2__TagValue(soap, tag, id, (ns2__TagValue *const*)ptr, "ns2:TagValue");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__TagIdArray:
		((ns2__TagIdArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__TagValueArray:
		((ns2__TagValueArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__TagValue:
		((ns2__TagValue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__RemoveStation:
		soap_serialize_ns2__RemoveStation(soap, (const struct ns2__RemoveStation *)ptr);
		break;
	case SOAP_TYPE_ns2__RemoveStationResponse:
		soap_serialize_ns2__RemoveStationResponse(soap, (const struct ns2__RemoveStationResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__EnableStation:
		soap_serialize_ns2__EnableStation(soap, (const struct ns2__EnableStation *)ptr);
		break;
	case SOAP_TYPE_ns2__EnableStationResponse:
		soap_serialize_ns2__EnableStationResponse(soap, (const struct ns2__EnableStationResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__SetStation:
		soap_serialize_ns2__SetStation(soap, (const struct ns2__SetStation *)ptr);
		break;
	case SOAP_TYPE_ns2__SetStationResponse:
		soap_serialize_ns2__SetStationResponse(soap, (const struct ns2__SetStationResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__RemvoeMeta:
		soap_serialize_ns2__RemvoeMeta(soap, (const struct ns2__RemvoeMeta *)ptr);
		break;
	case SOAP_TYPE_ns2__RemvoeMetaResponse:
		soap_serialize_ns2__RemvoeMetaResponse(soap, (const struct ns2__RemvoeMetaResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__SetMeta:
		soap_serialize_ns2__SetMeta(soap, (const struct ns2__SetMeta *)ptr);
		break;
	case SOAP_TYPE_ns2__SetMetaResponse:
		soap_serialize_ns2__SetMetaResponse(soap, (const struct ns2__SetMetaResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__EnableTag:
		soap_serialize_ns2__EnableTag(soap, (const struct ns2__EnableTag *)ptr);
		break;
	case SOAP_TYPE_ns2__EnableTagResponse:
		soap_serialize_ns2__EnableTagResponse(soap, (const struct ns2__EnableTagResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__SetTag:
		soap_serialize_ns2__SetTag(soap, (const struct ns2__SetTag *)ptr);
		break;
	case SOAP_TYPE_ns2__SetTagResponse:
		soap_serialize_ns2__SetTagResponse(soap, (const struct ns2__SetTagResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__Query:
		soap_serialize_ns2__Query(soap, (const struct ns2__Query *)ptr);
		break;
	case SOAP_TYPE_ns2__QueryResponse:
		soap_serialize_ns2__QueryResponse(soap, (const struct ns2__QueryResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__Read:
		soap_serialize_ns2__Read(soap, (const struct ns2__Read *)ptr);
		break;
	case SOAP_TYPE_ns2__ReadResponse:
		soap_serialize_ns2__ReadResponse(soap, (const struct ns2__ReadResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__RemoveSubscription:
		soap_serialize_ns2__RemoveSubscription(soap, (const struct ns2__RemoveSubscription *)ptr);
		break;
	case SOAP_TYPE_ns2__RemoveSubscriptionResponse:
		soap_serialize_ns2__RemoveSubscriptionResponse(soap, (const struct ns2__RemoveSubscriptionResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__RefreshSubscription:
		soap_serialize_ns2__RefreshSubscription(soap, (const struct ns2__RefreshSubscription *)ptr);
		break;
	case SOAP_TYPE_ns2__RefreshSubscriptionResponse:
		soap_serialize_ns2__RefreshSubscriptionResponse(soap, (const struct ns2__RefreshSubscriptionResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__AddSubscriptionItem:
		soap_serialize_ns2__AddSubscriptionItem(soap, (const struct ns2__AddSubscriptionItem *)ptr);
		break;
	case SOAP_TYPE_ns2__AddSubscriptionItemResponse:
		soap_serialize_ns2__AddSubscriptionItemResponse(soap, (const struct ns2__AddSubscriptionItemResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__CreateSubscription:
		soap_serialize_ns2__CreateSubscription(soap, (const struct ns2__CreateSubscription *)ptr);
		break;
	case SOAP_TYPE_ns2__CreateSubscriptionResponse:
		soap_serialize_ns2__CreateSubscriptionResponse(soap, (const struct ns2__CreateSubscriptionResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons2__TagValueArray:
		soap_serialize_PointerTons2__TagValueArray(soap, (ns2__TagValueArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__TagIdArray:
		soap_serialize_PointerTons2__TagIdArray(soap, (ns2__TagIdArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__TagValue:
		soap_serialize_PointerTons2__TagValue(soap, (ns2__TagValue *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TagValue:
		return (void*)soap_instantiate_ns2__TagValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TagValueArray:
		return (void*)soap_instantiate_ns2__TagValueArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TagIdArray:
		return (void*)soap_instantiate_ns2__TagIdArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__CreateSubscriptionResponse:
		return (void*)soap_instantiate_ns2__CreateSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__CreateSubscription:
		return (void*)soap_instantiate_ns2__CreateSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__AddSubscriptionItemResponse:
		return (void*)soap_instantiate_ns2__AddSubscriptionItemResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__AddSubscriptionItem:
		return (void*)soap_instantiate_ns2__AddSubscriptionItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RefreshSubscriptionResponse:
		return (void*)soap_instantiate_ns2__RefreshSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RefreshSubscription:
		return (void*)soap_instantiate_ns2__RefreshSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RemoveSubscriptionResponse:
		return (void*)soap_instantiate_ns2__RemoveSubscriptionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RemoveSubscription:
		return (void*)soap_instantiate_ns2__RemoveSubscription(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ReadResponse:
		return (void*)soap_instantiate_ns2__ReadResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Read:
		return (void*)soap_instantiate_ns2__Read(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__QueryResponse:
		return (void*)soap_instantiate_ns2__QueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Query:
		return (void*)soap_instantiate_ns2__Query(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetTagResponse:
		return (void*)soap_instantiate_ns2__SetTagResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetTag:
		return (void*)soap_instantiate_ns2__SetTag(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__EnableTagResponse:
		return (void*)soap_instantiate_ns2__EnableTagResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__EnableTag:
		return (void*)soap_instantiate_ns2__EnableTag(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetMetaResponse:
		return (void*)soap_instantiate_ns2__SetMetaResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetMeta:
		return (void*)soap_instantiate_ns2__SetMeta(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RemvoeMetaResponse:
		return (void*)soap_instantiate_ns2__RemvoeMetaResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RemvoeMeta:
		return (void*)soap_instantiate_ns2__RemvoeMeta(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetStationResponse:
		return (void*)soap_instantiate_ns2__SetStationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetStation:
		return (void*)soap_instantiate_ns2__SetStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__EnableStationResponse:
		return (void*)soap_instantiate_ns2__EnableStationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__EnableStation:
		return (void*)soap_instantiate_ns2__EnableStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RemoveStationResponse:
		return (void*)soap_instantiate_ns2__RemoveStationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RemoveStation:
		return (void*)soap_instantiate_ns2__RemoveStation(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__TagValue:
		if (p->size < 0)
			SOAP_DELETE((ns2__TagValue*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__TagValue*)p->ptr);
		break;
	case SOAP_TYPE_ns2__TagValueArray:
		if (p->size < 0)
			SOAP_DELETE((ns2__TagValueArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__TagValueArray*)p->ptr);
		break;
	case SOAP_TYPE_ns2__TagIdArray:
		if (p->size < 0)
			SOAP_DELETE((ns2__TagIdArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__TagIdArray*)p->ptr);
		break;
	case SOAP_TYPE_ns2__CreateSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__CreateSubscriptionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__CreateSubscriptionResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__CreateSubscription:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__CreateSubscription*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__CreateSubscription*)p->ptr);
		break;
	case SOAP_TYPE_ns2__AddSubscriptionItemResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__AddSubscriptionItemResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__AddSubscriptionItemResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__AddSubscriptionItem:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__AddSubscriptionItem*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__AddSubscriptionItem*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RefreshSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RefreshSubscriptionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RefreshSubscriptionResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RefreshSubscription:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RefreshSubscription*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RefreshSubscription*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RemoveSubscriptionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RemoveSubscriptionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RemoveSubscriptionResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RemoveSubscription:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RemoveSubscription*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RemoveSubscription*)p->ptr);
		break;
	case SOAP_TYPE_ns2__ReadResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__ReadResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__ReadResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__Read:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__Read*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__Read*)p->ptr);
		break;
	case SOAP_TYPE_ns2__QueryResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__QueryResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__QueryResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__Query:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__Query*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__Query*)p->ptr);
		break;
	case SOAP_TYPE_ns2__SetTagResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__SetTagResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__SetTagResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__SetTag:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__SetTag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__SetTag*)p->ptr);
		break;
	case SOAP_TYPE_ns2__EnableTagResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__EnableTagResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__EnableTagResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__EnableTag:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__EnableTag*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__EnableTag*)p->ptr);
		break;
	case SOAP_TYPE_ns2__SetMetaResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__SetMetaResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__SetMetaResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__SetMeta:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__SetMeta*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__SetMeta*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RemvoeMetaResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RemvoeMetaResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RemvoeMetaResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RemvoeMeta:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RemvoeMeta*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RemvoeMeta*)p->ptr);
		break;
	case SOAP_TYPE_ns2__SetStationResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__SetStationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__SetStationResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__SetStation:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__SetStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__SetStation*)p->ptr);
		break;
	case SOAP_TYPE_ns2__EnableStationResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__EnableStationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__EnableStationResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__EnableStation:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__EnableStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__EnableStation*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RemoveStationResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RemoveStationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RemoveStationResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__RemoveStation:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__RemoveStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__RemoveStation*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns2__TagValue * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns2__TagValue * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns2__TagValue * >*)p)[len] = *(ns2__TagValue **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns2__TagIdArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfint(soap, &this->ns2__TagIdArray::item);
	/* transient soap skipped */
}

void ns2__TagIdArray::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfint(soap, &this->ns2__TagIdArray::item);
	/* transient soap skipped */
#endif
}

int ns2__TagIdArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TagIdArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagIdArray(struct soap *soap, const char *tag, int id, const ns2__TagIdArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TagIdArray), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "item", -1, &(a->ns2__TagIdArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__TagIdArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__TagIdArray(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TagIdArray * SOAP_FMAC4 soap_in_ns2__TagIdArray(struct soap *soap, const char *tag, ns2__TagIdArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TagIdArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TagIdArray, sizeof(ns2__TagIdArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__TagIdArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__TagIdArray *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "item", &(a->ns2__TagIdArray::item), "xsd:int"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__TagIdArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TagIdArray, 0, sizeof(ns2__TagIdArray), 0, soap_copy_ns2__TagIdArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns2__TagIdArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__TagIdArray);
	if (this->soap_out(soap, tag?tag:"ns2:TagIdArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TagIdArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TagIdArray(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TagIdArray * SOAP_FMAC4 soap_get_ns2__TagIdArray(struct soap *soap, ns2__TagIdArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TagIdArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__TagIdArray * SOAP_FMAC2 soap_instantiate_ns2__TagIdArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TagIdArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__TagIdArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__TagIdArray);
		if (size)
			*size = sizeof(ns2__TagIdArray);
		((ns2__TagIdArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__TagIdArray, n);
		if (size)
			*size = n * sizeof(ns2__TagIdArray);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__TagIdArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__TagIdArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagIdArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__TagIdArray %p -> %p\n", q, p));
	*(ns2__TagIdArray*)p = *(ns2__TagIdArray*)q;
}

void ns2__TagValueArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns2__TagValueArray::error);
	soap_default_std__vectorTemplateOfPointerTons2__TagValue(soap, &this->ns2__TagValueArray::item);
	/* transient soap skipped */
}

void ns2__TagValueArray::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons2__TagValue(soap, &this->ns2__TagValueArray::item);
	/* transient soap skipped */
#endif
}

int ns2__TagValueArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TagValueArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagValueArray(struct soap *soap, const char *tag, int id, const ns2__TagValueArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TagValueArray), type))
		return soap->error;
	if (soap_out_int(soap, "error", -1, &(a->ns2__TagValueArray::error), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons2__TagValue(soap, "item", -1, &(a->ns2__TagValueArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__TagValueArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__TagValueArray(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TagValueArray * SOAP_FMAC4 soap_in_ns2__TagValueArray(struct soap *soap, const char *tag, ns2__TagValueArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TagValueArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TagValueArray, sizeof(ns2__TagValueArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__TagValueArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__TagValueArray *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_error1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_error1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "error", &(a->ns2__TagValueArray::error), "xsd:int"))
				{	soap_flag_error1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons2__TagValue(soap, "item", &(a->ns2__TagValueArray::item), "ns2:TagValue"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__TagValueArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TagValueArray, 0, sizeof(ns2__TagValueArray), 0, soap_copy_ns2__TagValueArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_error1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns2__TagValueArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__TagValueArray);
	if (this->soap_out(soap, tag?tag:"ns2:TagValueArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TagValueArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TagValueArray(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TagValueArray * SOAP_FMAC4 soap_get_ns2__TagValueArray(struct soap *soap, ns2__TagValueArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TagValueArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__TagValueArray * SOAP_FMAC2 soap_instantiate_ns2__TagValueArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TagValueArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__TagValueArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__TagValueArray);
		if (size)
			*size = sizeof(ns2__TagValueArray);
		((ns2__TagValueArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__TagValueArray, n);
		if (size)
			*size = n * sizeof(ns2__TagValueArray);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__TagValueArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__TagValueArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagValueArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__TagValueArray %p -> %p\n", q, p));
	*(ns2__TagValueArray*)p = *(ns2__TagValueArray*)q;
}

void ns2__TagValue::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->ns2__TagValue::id);
	soap_default_LONG64(soap, &this->ns2__TagValue::time);
	this->ns2__TagValue::value = NULL;
	/* transient soap skipped */
}

void ns2__TagValue::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns2__TagValue::value);
	/* transient soap skipped */
#endif
}

int ns2__TagValue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TagValue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TagValue(struct soap *soap, const char *tag, int id, const ns2__TagValue *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TagValue), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "id", -1, &(a->ns2__TagValue::id), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "time", -1, &(a->ns2__TagValue::time), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "value", -1, &(a->ns2__TagValue::value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__TagValue::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__TagValue(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TagValue * SOAP_FMAC4 soap_in_ns2__TagValue(struct soap *soap, const char *tag, ns2__TagValue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TagValue *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TagValue, sizeof(ns2__TagValue), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__TagValue)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__TagValue *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_time1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "id", &(a->ns2__TagValue::id), "xsd:unsignedInt"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "time", &(a->ns2__TagValue::time), "xsd:long"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "value", &(a->ns2__TagValue::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__TagValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TagValue, 0, sizeof(ns2__TagValue), 0, soap_copy_ns2__TagValue);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_time1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns2__TagValue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__TagValue);
	if (this->soap_out(soap, tag?tag:"ns2:TagValue", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TagValue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TagValue(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TagValue * SOAP_FMAC4 soap_get_ns2__TagValue(struct soap *soap, ns2__TagValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TagValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__TagValue * SOAP_FMAC2 soap_instantiate_ns2__TagValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TagValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__TagValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__TagValue);
		if (size)
			*size = sizeof(ns2__TagValue);
		((ns2__TagValue*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__TagValue, n);
		if (size)
			*size = n * sizeof(ns2__TagValue);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__TagValue*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__TagValue*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__TagValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__TagValue %p -> %p\n", q, p));
	*(ns2__TagValue*)p = *(ns2__TagValue*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RemoveStation(struct soap *soap, struct ns2__RemoveStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RemoveStation(struct soap *soap, const struct ns2__RemoveStation *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RemoveStation(struct soap *soap, const char *tag, int id, const struct ns2__RemoveStation *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RemoveStation), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "id", -1, &a->id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RemoveStation * SOAP_FMAC4 soap_in_ns2__RemoveStation(struct soap *soap, const char *tag, struct ns2__RemoveStation *a, const char *type)
{
	size_t soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RemoveStation *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RemoveStation, sizeof(struct ns2__RemoveStation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RemoveStation(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "id", &a->id, "xsd:unsignedByte"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RemoveStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RemoveStation, 0, sizeof(struct ns2__RemoveStation), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RemoveStation(struct soap *soap, const struct ns2__RemoveStation *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RemoveStation);
	if (soap_out_ns2__RemoveStation(soap, tag?tag:"ns2:RemoveStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RemoveStation * SOAP_FMAC4 soap_get_ns2__RemoveStation(struct soap *soap, struct ns2__RemoveStation *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RemoveStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RemoveStation * SOAP_FMAC2 soap_instantiate_ns2__RemoveStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RemoveStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RemoveStation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RemoveStation);
		if (size)
			*size = sizeof(struct ns2__RemoveStation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RemoveStation, n);
		if (size)
			*size = n * sizeof(struct ns2__RemoveStation);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RemoveStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RemoveStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RemoveStation %p -> %p\n", q, p));
	*(struct ns2__RemoveStation*)p = *(struct ns2__RemoveStation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RemoveStationResponse(struct soap *soap, struct ns2__RemoveStationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RemoveStationResponse(struct soap *soap, const struct ns2__RemoveStationResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RemoveStationResponse(struct soap *soap, const char *tag, int id, const struct ns2__RemoveStationResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RemoveStationResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RemoveStationResponse * SOAP_FMAC4 soap_in_ns2__RemoveStationResponse(struct soap *soap, const char *tag, struct ns2__RemoveStationResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RemoveStationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RemoveStationResponse, sizeof(struct ns2__RemoveStationResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RemoveStationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RemoveStationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RemoveStationResponse, 0, sizeof(struct ns2__RemoveStationResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RemoveStationResponse(struct soap *soap, const struct ns2__RemoveStationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RemoveStationResponse);
	if (soap_out_ns2__RemoveStationResponse(soap, tag?tag:"ns2:RemoveStationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RemoveStationResponse * SOAP_FMAC4 soap_get_ns2__RemoveStationResponse(struct soap *soap, struct ns2__RemoveStationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RemoveStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RemoveStationResponse * SOAP_FMAC2 soap_instantiate_ns2__RemoveStationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RemoveStationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RemoveStationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RemoveStationResponse);
		if (size)
			*size = sizeof(struct ns2__RemoveStationResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RemoveStationResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__RemoveStationResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RemoveStationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RemoveStationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RemoveStationResponse %p -> %p\n", q, p));
	*(struct ns2__RemoveStationResponse*)p = *(struct ns2__RemoveStationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__EnableStation(struct soap *soap, struct ns2__EnableStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->id);
	soap_default_bool(soap, &a->enabled);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__EnableStation(struct soap *soap, const struct ns2__EnableStation *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EnableStation(struct soap *soap, const char *tag, int id, const struct ns2__EnableStation *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__EnableStation), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_bool(soap, "enabled", -1, &a->enabled, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__EnableStation * SOAP_FMAC4 soap_in_ns2__EnableStation(struct soap *soap, const char *tag, struct ns2__EnableStation *a, const char *type)
{
	size_t soap_flag_id = 1;
	size_t soap_flag_enabled = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__EnableStation *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__EnableStation, sizeof(struct ns2__EnableStation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__EnableStation(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "id", &a->id, "xsd:unsignedByte"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_enabled && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "enabled", &a->enabled, "xsd:boolean"))
				{	soap_flag_enabled--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__EnableStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__EnableStation, 0, sizeof(struct ns2__EnableStation), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id > 0 || soap_flag_enabled > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__EnableStation(struct soap *soap, const struct ns2__EnableStation *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__EnableStation);
	if (soap_out_ns2__EnableStation(soap, tag?tag:"ns2:EnableStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__EnableStation * SOAP_FMAC4 soap_get_ns2__EnableStation(struct soap *soap, struct ns2__EnableStation *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__EnableStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__EnableStation * SOAP_FMAC2 soap_instantiate_ns2__EnableStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__EnableStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__EnableStation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__EnableStation);
		if (size)
			*size = sizeof(struct ns2__EnableStation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__EnableStation, n);
		if (size)
			*size = n * sizeof(struct ns2__EnableStation);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__EnableStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EnableStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__EnableStation %p -> %p\n", q, p));
	*(struct ns2__EnableStation*)p = *(struct ns2__EnableStation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__EnableStationResponse(struct soap *soap, struct ns2__EnableStationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__EnableStationResponse(struct soap *soap, const struct ns2__EnableStationResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EnableStationResponse(struct soap *soap, const char *tag, int id, const struct ns2__EnableStationResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__EnableStationResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__EnableStationResponse * SOAP_FMAC4 soap_in_ns2__EnableStationResponse(struct soap *soap, const char *tag, struct ns2__EnableStationResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__EnableStationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__EnableStationResponse, sizeof(struct ns2__EnableStationResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__EnableStationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__EnableStationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__EnableStationResponse, 0, sizeof(struct ns2__EnableStationResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__EnableStationResponse(struct soap *soap, const struct ns2__EnableStationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__EnableStationResponse);
	if (soap_out_ns2__EnableStationResponse(soap, tag?tag:"ns2:EnableStationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__EnableStationResponse * SOAP_FMAC4 soap_get_ns2__EnableStationResponse(struct soap *soap, struct ns2__EnableStationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__EnableStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__EnableStationResponse * SOAP_FMAC2 soap_instantiate_ns2__EnableStationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__EnableStationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__EnableStationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__EnableStationResponse);
		if (size)
			*size = sizeof(struct ns2__EnableStationResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__EnableStationResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__EnableStationResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__EnableStationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EnableStationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__EnableStationResponse %p -> %p\n", q, p));
	*(struct ns2__EnableStationResponse*)p = *(struct ns2__EnableStationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetStation(struct soap *soap, struct ns2__SetStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->id);
	soap_default_std__string(soap, &a->name);
	soap_default_bool(soap, &a->isScada);
	soap_default_std__string(soap, &a->recvHost);
	soap_default_unsignedShort(soap, &a->recvPort);
	soap_default_std__string(soap, &a->syncHost);
	soap_default_unsignedShort(soap, &a->syncPort);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetStation(struct soap *soap, const struct ns2__SetStation *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->name);
	soap_embedded(soap, &a->recvHost, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->recvHost);
	soap_embedded(soap, &a->syncHost, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->syncHost);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetStation(struct soap *soap, const char *tag, int id, const struct ns2__SetStation *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetStation), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &a->name, ""))
		return soap->error;
	if (soap_out_bool(soap, "isScada", -1, &a->isScada, ""))
		return soap->error;
	if (soap_out_std__string(soap, "recvHost", -1, &a->recvHost, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "recvPort", -1, &a->recvPort, ""))
		return soap->error;
	if (soap_out_std__string(soap, "syncHost", -1, &a->syncHost, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "syncPort", -1, &a->syncPort, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetStation * SOAP_FMAC4 soap_in_ns2__SetStation(struct soap *soap, const char *tag, struct ns2__SetStation *a, const char *type)
{
	size_t soap_flag_id = 1;
	size_t soap_flag_name = 1;
	size_t soap_flag_isScada = 1;
	size_t soap_flag_recvHost = 1;
	size_t soap_flag_recvPort = 1;
	size_t soap_flag_syncHost = 1;
	size_t soap_flag_syncPort = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetStation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetStation, sizeof(struct ns2__SetStation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__SetStation(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "id", &a->id, "xsd:unsignedByte"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_isScada && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isScada", &a->isScada, "xsd:boolean"))
				{	soap_flag_isScada--;
					continue;
				}
			if (soap_flag_recvHost && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "recvHost", &a->recvHost, "xsd:string"))
				{	soap_flag_recvHost--;
					continue;
				}
			if (soap_flag_recvPort && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "recvPort", &a->recvPort, "xsd:unsignedShort"))
				{	soap_flag_recvPort--;
					continue;
				}
			if (soap_flag_syncHost && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "syncHost", &a->syncHost, "xsd:string"))
				{	soap_flag_syncHost--;
					continue;
				}
			if (soap_flag_syncPort && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "syncPort", &a->syncPort, "xsd:unsignedShort"))
				{	soap_flag_syncPort--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetStation, 0, sizeof(struct ns2__SetStation), 0, soap_copy_ns2__SetStation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id > 0 || soap_flag_name > 0 || soap_flag_isScada > 0 || soap_flag_recvHost > 0 || soap_flag_recvPort > 0 || soap_flag_syncHost > 0 || soap_flag_syncPort > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetStation(struct soap *soap, const struct ns2__SetStation *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetStation);
	if (soap_out_ns2__SetStation(soap, tag?tag:"ns2:SetStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__SetStation * SOAP_FMAC4 soap_get_ns2__SetStation(struct soap *soap, struct ns2__SetStation *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__SetStation * SOAP_FMAC2 soap_instantiate_ns2__SetStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetStation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__SetStation);
		if (size)
			*size = sizeof(struct ns2__SetStation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__SetStation, n);
		if (size)
			*size = n * sizeof(struct ns2__SetStation);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__SetStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetStation %p -> %p\n", q, p));
	*(struct ns2__SetStation*)p = *(struct ns2__SetStation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetStationResponse(struct soap *soap, struct ns2__SetStationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetStationResponse(struct soap *soap, const struct ns2__SetStationResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetStationResponse(struct soap *soap, const char *tag, int id, const struct ns2__SetStationResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetStationResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetStationResponse * SOAP_FMAC4 soap_in_ns2__SetStationResponse(struct soap *soap, const char *tag, struct ns2__SetStationResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetStationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetStationResponse, sizeof(struct ns2__SetStationResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__SetStationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetStationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetStationResponse, 0, sizeof(struct ns2__SetStationResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetStationResponse(struct soap *soap, const struct ns2__SetStationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetStationResponse);
	if (soap_out_ns2__SetStationResponse(soap, tag?tag:"ns2:SetStationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__SetStationResponse * SOAP_FMAC4 soap_get_ns2__SetStationResponse(struct soap *soap, struct ns2__SetStationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__SetStationResponse * SOAP_FMAC2 soap_instantiate_ns2__SetStationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetStationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetStationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__SetStationResponse);
		if (size)
			*size = sizeof(struct ns2__SetStationResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__SetStationResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__SetStationResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__SetStationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetStationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetStationResponse %p -> %p\n", q, p));
	*(struct ns2__SetStationResponse*)p = *(struct ns2__SetStationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RemvoeMeta(struct soap *soap, struct ns2__RemvoeMeta *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	soap_default_unsignedShort(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RemvoeMeta(struct soap *soap, const struct ns2__RemvoeMeta *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RemvoeMeta(struct soap *soap, const char *tag, int id, const struct ns2__RemvoeMeta *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RemvoeMeta), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "id", -1, &a->id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RemvoeMeta * SOAP_FMAC4 soap_in_ns2__RemvoeMeta(struct soap *soap, const char *tag, struct ns2__RemvoeMeta *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RemvoeMeta *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RemvoeMeta, sizeof(struct ns2__RemvoeMeta), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RemvoeMeta(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "id", &a->id, "xsd:unsignedShort"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RemvoeMeta *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RemvoeMeta, 0, sizeof(struct ns2__RemvoeMeta), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RemvoeMeta(struct soap *soap, const struct ns2__RemvoeMeta *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RemvoeMeta);
	if (soap_out_ns2__RemvoeMeta(soap, tag?tag:"ns2:RemvoeMeta", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RemvoeMeta * SOAP_FMAC4 soap_get_ns2__RemvoeMeta(struct soap *soap, struct ns2__RemvoeMeta *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RemvoeMeta(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RemvoeMeta * SOAP_FMAC2 soap_instantiate_ns2__RemvoeMeta(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RemvoeMeta(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RemvoeMeta, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RemvoeMeta);
		if (size)
			*size = sizeof(struct ns2__RemvoeMeta);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RemvoeMeta, n);
		if (size)
			*size = n * sizeof(struct ns2__RemvoeMeta);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RemvoeMeta*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RemvoeMeta(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RemvoeMeta %p -> %p\n", q, p));
	*(struct ns2__RemvoeMeta*)p = *(struct ns2__RemvoeMeta*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RemvoeMetaResponse(struct soap *soap, struct ns2__RemvoeMetaResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RemvoeMetaResponse(struct soap *soap, const struct ns2__RemvoeMetaResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RemvoeMetaResponse(struct soap *soap, const char *tag, int id, const struct ns2__RemvoeMetaResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RemvoeMetaResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RemvoeMetaResponse * SOAP_FMAC4 soap_in_ns2__RemvoeMetaResponse(struct soap *soap, const char *tag, struct ns2__RemvoeMetaResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RemvoeMetaResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RemvoeMetaResponse, sizeof(struct ns2__RemvoeMetaResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RemvoeMetaResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RemvoeMetaResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RemvoeMetaResponse, 0, sizeof(struct ns2__RemvoeMetaResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RemvoeMetaResponse(struct soap *soap, const struct ns2__RemvoeMetaResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RemvoeMetaResponse);
	if (soap_out_ns2__RemvoeMetaResponse(soap, tag?tag:"ns2:RemvoeMetaResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RemvoeMetaResponse * SOAP_FMAC4 soap_get_ns2__RemvoeMetaResponse(struct soap *soap, struct ns2__RemvoeMetaResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RemvoeMetaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RemvoeMetaResponse * SOAP_FMAC2 soap_instantiate_ns2__RemvoeMetaResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RemvoeMetaResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RemvoeMetaResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RemvoeMetaResponse);
		if (size)
			*size = sizeof(struct ns2__RemvoeMetaResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RemvoeMetaResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__RemvoeMetaResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RemvoeMetaResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RemvoeMetaResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RemvoeMetaResponse %p -> %p\n", q, p));
	*(struct ns2__RemvoeMetaResponse*)p = *(struct ns2__RemvoeMetaResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetMeta(struct soap *soap, struct ns2__SetMeta *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	soap_default_unsignedShort(soap, &a->id);
	soap_default_int(soap, &a->index);
	soap_default_std__string(soap, &a->name);
	soap_default_int(soap, &a->dataLen);
	soap_default_bool(soap, &a->isValue);
	soap_default_bool(soap, &a->isAlarm);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetMeta(struct soap *soap, const struct ns2__SetMeta *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->name);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetMeta(struct soap *soap, const char *tag, int id, const struct ns2__SetMeta *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetMeta), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_int(soap, "index", -1, &a->index, ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &a->name, ""))
		return soap->error;
	if (soap_out_int(soap, "dataLen", -1, &a->dataLen, ""))
		return soap->error;
	if (soap_out_bool(soap, "isValue", -1, &a->isValue, ""))
		return soap->error;
	if (soap_out_bool(soap, "isAlarm", -1, &a->isAlarm, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetMeta * SOAP_FMAC4 soap_in_ns2__SetMeta(struct soap *soap, const char *tag, struct ns2__SetMeta *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_id = 1;
	size_t soap_flag_index = 1;
	size_t soap_flag_name = 1;
	size_t soap_flag_dataLen = 1;
	size_t soap_flag_isValue = 1;
	size_t soap_flag_isAlarm = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetMeta *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetMeta, sizeof(struct ns2__SetMeta), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__SetMeta(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "id", &a->id, "xsd:unsignedShort"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_index && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "index", &a->index, "xsd:int"))
				{	soap_flag_index--;
					continue;
				}
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_dataLen && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dataLen", &a->dataLen, "xsd:int"))
				{	soap_flag_dataLen--;
					continue;
				}
			if (soap_flag_isValue && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isValue", &a->isValue, "xsd:boolean"))
				{	soap_flag_isValue--;
					continue;
				}
			if (soap_flag_isAlarm && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isAlarm", &a->isAlarm, "xsd:boolean"))
				{	soap_flag_isAlarm--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetMeta *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetMeta, 0, sizeof(struct ns2__SetMeta), 0, soap_copy_ns2__SetMeta);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_id > 0 || soap_flag_index > 0 || soap_flag_name > 0 || soap_flag_dataLen > 0 || soap_flag_isValue > 0 || soap_flag_isAlarm > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetMeta(struct soap *soap, const struct ns2__SetMeta *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetMeta);
	if (soap_out_ns2__SetMeta(soap, tag?tag:"ns2:SetMeta", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__SetMeta * SOAP_FMAC4 soap_get_ns2__SetMeta(struct soap *soap, struct ns2__SetMeta *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetMeta(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__SetMeta * SOAP_FMAC2 soap_instantiate_ns2__SetMeta(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetMeta(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetMeta, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__SetMeta);
		if (size)
			*size = sizeof(struct ns2__SetMeta);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__SetMeta, n);
		if (size)
			*size = n * sizeof(struct ns2__SetMeta);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__SetMeta*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetMeta(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetMeta %p -> %p\n", q, p));
	*(struct ns2__SetMeta*)p = *(struct ns2__SetMeta*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetMetaResponse(struct soap *soap, struct ns2__SetMetaResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetMetaResponse(struct soap *soap, const struct ns2__SetMetaResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetMetaResponse(struct soap *soap, const char *tag, int id, const struct ns2__SetMetaResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetMetaResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetMetaResponse * SOAP_FMAC4 soap_in_ns2__SetMetaResponse(struct soap *soap, const char *tag, struct ns2__SetMetaResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetMetaResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetMetaResponse, sizeof(struct ns2__SetMetaResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__SetMetaResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetMetaResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetMetaResponse, 0, sizeof(struct ns2__SetMetaResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetMetaResponse(struct soap *soap, const struct ns2__SetMetaResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetMetaResponse);
	if (soap_out_ns2__SetMetaResponse(soap, tag?tag:"ns2:SetMetaResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__SetMetaResponse * SOAP_FMAC4 soap_get_ns2__SetMetaResponse(struct soap *soap, struct ns2__SetMetaResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetMetaResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__SetMetaResponse * SOAP_FMAC2 soap_instantiate_ns2__SetMetaResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetMetaResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetMetaResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__SetMetaResponse);
		if (size)
			*size = sizeof(struct ns2__SetMetaResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__SetMetaResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__SetMetaResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__SetMetaResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetMetaResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetMetaResponse %p -> %p\n", q, p));
	*(struct ns2__SetMetaResponse*)p = *(struct ns2__SetMetaResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__EnableTag(struct soap *soap, struct ns2__EnableTag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	soap_default_unsignedInt(soap, &a->id);
	soap_default_bool(soap, &a->enable);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__EnableTag(struct soap *soap, const struct ns2__EnableTag *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EnableTag(struct soap *soap, const char *tag, int id, const struct ns2__EnableTag *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__EnableTag), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_bool(soap, "enable", -1, &a->enable, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__EnableTag * SOAP_FMAC4 soap_in_ns2__EnableTag(struct soap *soap, const char *tag, struct ns2__EnableTag *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_id = 1;
	size_t soap_flag_enable = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__EnableTag *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__EnableTag, sizeof(struct ns2__EnableTag), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__EnableTag(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "id", &a->id, "xsd:unsignedInt"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_enable && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "enable", &a->enable, "xsd:boolean"))
				{	soap_flag_enable--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__EnableTag *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__EnableTag, 0, sizeof(struct ns2__EnableTag), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_id > 0 || soap_flag_enable > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__EnableTag(struct soap *soap, const struct ns2__EnableTag *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__EnableTag);
	if (soap_out_ns2__EnableTag(soap, tag?tag:"ns2:EnableTag", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__EnableTag * SOAP_FMAC4 soap_get_ns2__EnableTag(struct soap *soap, struct ns2__EnableTag *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__EnableTag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__EnableTag * SOAP_FMAC2 soap_instantiate_ns2__EnableTag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__EnableTag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__EnableTag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__EnableTag);
		if (size)
			*size = sizeof(struct ns2__EnableTag);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__EnableTag, n);
		if (size)
			*size = n * sizeof(struct ns2__EnableTag);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__EnableTag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EnableTag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__EnableTag %p -> %p\n", q, p));
	*(struct ns2__EnableTag*)p = *(struct ns2__EnableTag*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__EnableTagResponse(struct soap *soap, struct ns2__EnableTagResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__EnableTagResponse(struct soap *soap, const struct ns2__EnableTagResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__EnableTagResponse(struct soap *soap, const char *tag, int id, const struct ns2__EnableTagResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__EnableTagResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__EnableTagResponse * SOAP_FMAC4 soap_in_ns2__EnableTagResponse(struct soap *soap, const char *tag, struct ns2__EnableTagResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__EnableTagResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__EnableTagResponse, sizeof(struct ns2__EnableTagResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__EnableTagResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__EnableTagResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__EnableTagResponse, 0, sizeof(struct ns2__EnableTagResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__EnableTagResponse(struct soap *soap, const struct ns2__EnableTagResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__EnableTagResponse);
	if (soap_out_ns2__EnableTagResponse(soap, tag?tag:"ns2:EnableTagResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__EnableTagResponse * SOAP_FMAC4 soap_get_ns2__EnableTagResponse(struct soap *soap, struct ns2__EnableTagResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__EnableTagResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__EnableTagResponse * SOAP_FMAC2 soap_instantiate_ns2__EnableTagResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__EnableTagResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__EnableTagResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__EnableTagResponse);
		if (size)
			*size = sizeof(struct ns2__EnableTagResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__EnableTagResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__EnableTagResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__EnableTagResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__EnableTagResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__EnableTagResponse %p -> %p\n", q, p));
	*(struct ns2__EnableTagResponse*)p = *(struct ns2__EnableTagResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetTag(struct soap *soap, struct ns2__SetTag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	soap_default_unsignedInt(soap, &a->id);
	soap_default_unsignedShort(soap, &a->metaId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetTag(struct soap *soap, const struct ns2__SetTag *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetTag(struct soap *soap, const char *tag, int id, const struct ns2__SetTag *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetTag), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "metaId", -1, &a->metaId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetTag * SOAP_FMAC4 soap_in_ns2__SetTag(struct soap *soap, const char *tag, struct ns2__SetTag *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_id = 1;
	size_t soap_flag_metaId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetTag *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetTag, sizeof(struct ns2__SetTag), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__SetTag(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "id", &a->id, "xsd:unsignedInt"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_metaId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "metaId", &a->metaId, "xsd:unsignedShort"))
				{	soap_flag_metaId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetTag *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetTag, 0, sizeof(struct ns2__SetTag), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_id > 0 || soap_flag_metaId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetTag(struct soap *soap, const struct ns2__SetTag *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetTag);
	if (soap_out_ns2__SetTag(soap, tag?tag:"ns2:SetTag", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__SetTag * SOAP_FMAC4 soap_get_ns2__SetTag(struct soap *soap, struct ns2__SetTag *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetTag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__SetTag * SOAP_FMAC2 soap_instantiate_ns2__SetTag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetTag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetTag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__SetTag);
		if (size)
			*size = sizeof(struct ns2__SetTag);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__SetTag, n);
		if (size)
			*size = n * sizeof(struct ns2__SetTag);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__SetTag*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetTag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetTag %p -> %p\n", q, p));
	*(struct ns2__SetTag*)p = *(struct ns2__SetTag*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetTagResponse(struct soap *soap, struct ns2__SetTagResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetTagResponse(struct soap *soap, const struct ns2__SetTagResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetTagResponse(struct soap *soap, const char *tag, int id, const struct ns2__SetTagResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetTagResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetTagResponse * SOAP_FMAC4 soap_in_ns2__SetTagResponse(struct soap *soap, const char *tag, struct ns2__SetTagResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetTagResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetTagResponse, sizeof(struct ns2__SetTagResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__SetTagResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetTagResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetTagResponse, 0, sizeof(struct ns2__SetTagResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetTagResponse(struct soap *soap, const struct ns2__SetTagResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetTagResponse);
	if (soap_out_ns2__SetTagResponse(soap, tag?tag:"ns2:SetTagResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__SetTagResponse * SOAP_FMAC4 soap_get_ns2__SetTagResponse(struct soap *soap, struct ns2__SetTagResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetTagResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__SetTagResponse * SOAP_FMAC2 soap_instantiate_ns2__SetTagResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetTagResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetTagResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__SetTagResponse);
		if (size)
			*size = sizeof(struct ns2__SetTagResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__SetTagResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__SetTagResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__SetTagResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetTagResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetTagResponse %p -> %p\n", q, p));
	*(struct ns2__SetTagResponse*)p = *(struct ns2__SetTagResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Query(struct soap *soap, struct ns2__Query *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	a->tagId = NULL;
	soap_default_xsd__unsignedByte(soap, &a->valueType);
	soap_default_LONG64(soap, &a->beginTime);
	soap_default_LONG64(soap, &a->endTime);
	soap_default_unsignedShort(soap, &a->count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Query(struct soap *soap, const struct ns2__Query *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagIdArray(soap, &a->tagId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Query(struct soap *soap, const char *tag, int id, const struct ns2__Query *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Query), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_PointerTons2__TagIdArray(soap, "tagId", -1, &a->tagId, ""))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "valueType", -1, &a->valueType, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "beginTime", -1, &a->beginTime, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "endTime", -1, &a->endTime, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "count", -1, &a->count, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Query * SOAP_FMAC4 soap_in_ns2__Query(struct soap *soap, const char *tag, struct ns2__Query *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_tagId = 1;
	size_t soap_flag_valueType = 1;
	size_t soap_flag_beginTime = 1;
	size_t soap_flag_endTime = 1;
	size_t soap_flag_count = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Query *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Query, sizeof(struct ns2__Query), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Query(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_tagId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagIdArray(soap, "tagId", &a->tagId, "ns2:TagIdArray"))
				{	soap_flag_tagId--;
					continue;
				}
			if (soap_flag_valueType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "valueType", &a->valueType, "xsd:unsignedByte"))
				{	soap_flag_valueType--;
					continue;
				}
			if (soap_flag_beginTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "beginTime", &a->beginTime, "xsd:long"))
				{	soap_flag_beginTime--;
					continue;
				}
			if (soap_flag_endTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "endTime", &a->endTime, "xsd:long"))
				{	soap_flag_endTime--;
					continue;
				}
			if (soap_flag_count && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "count", &a->count, "xsd:unsignedShort"))
				{	soap_flag_count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Query *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Query, 0, sizeof(struct ns2__Query), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_valueType > 0 || soap_flag_beginTime > 0 || soap_flag_endTime > 0 || soap_flag_count > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Query(struct soap *soap, const struct ns2__Query *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Query);
	if (soap_out_ns2__Query(soap, tag?tag:"ns2:Query", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Query * SOAP_FMAC4 soap_get_ns2__Query(struct soap *soap, struct ns2__Query *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Query(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__Query * SOAP_FMAC2 soap_instantiate_ns2__Query(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Query(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Query, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__Query);
		if (size)
			*size = sizeof(struct ns2__Query);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__Query, n);
		if (size)
			*size = n * sizeof(struct ns2__Query);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__Query*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Query(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__Query %p -> %p\n", q, p));
	*(struct ns2__Query*)p = *(struct ns2__Query*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryResponse(struct soap *soap, struct ns2__QueryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryResponse(struct soap *soap, const struct ns2__QueryResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagValueArray(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryResponse(struct soap *soap, const char *tag, int id, const struct ns2__QueryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__TagValueArray(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryResponse * SOAP_FMAC4 soap_in_ns2__QueryResponse(struct soap *soap, const char *tag, struct ns2__QueryResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryResponse, sizeof(struct ns2__QueryResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagValueArray(soap, "result", &a->result, "ns2:TagValueArray"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryResponse, 0, sizeof(struct ns2__QueryResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryResponse(struct soap *soap, const struct ns2__QueryResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryResponse);
	if (soap_out_ns2__QueryResponse(soap, tag?tag:"ns2:QueryResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__QueryResponse * SOAP_FMAC4 soap_get_ns2__QueryResponse(struct soap *soap, struct ns2__QueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__QueryResponse * SOAP_FMAC2 soap_instantiate_ns2__QueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__QueryResponse);
		if (size)
			*size = sizeof(struct ns2__QueryResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__QueryResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__QueryResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__QueryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryResponse %p -> %p\n", q, p));
	*(struct ns2__QueryResponse*)p = *(struct ns2__QueryResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Read(struct soap *soap, struct ns2__Read *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	a->tagId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Read(struct soap *soap, const struct ns2__Read *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagIdArray(soap, &a->tagId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Read(struct soap *soap, const char *tag, int id, const struct ns2__Read *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Read), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_PointerTons2__TagIdArray(soap, "tagId", -1, &a->tagId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Read * SOAP_FMAC4 soap_in_ns2__Read(struct soap *soap, const char *tag, struct ns2__Read *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_tagId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Read *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Read, sizeof(struct ns2__Read), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Read(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_tagId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagIdArray(soap, "tagId", &a->tagId, "ns2:TagIdArray"))
				{	soap_flag_tagId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Read *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Read, 0, sizeof(struct ns2__Read), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Read(struct soap *soap, const struct ns2__Read *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Read);
	if (soap_out_ns2__Read(soap, tag?tag:"ns2:Read", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__Read * SOAP_FMAC4 soap_get_ns2__Read(struct soap *soap, struct ns2__Read *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Read(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__Read * SOAP_FMAC2 soap_instantiate_ns2__Read(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Read(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Read, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__Read);
		if (size)
			*size = sizeof(struct ns2__Read);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__Read, n);
		if (size)
			*size = n * sizeof(struct ns2__Read);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__Read*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Read(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__Read %p -> %p\n", q, p));
	*(struct ns2__Read*)p = *(struct ns2__Read*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ReadResponse(struct soap *soap, struct ns2__ReadResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ReadResponse(struct soap *soap, const struct ns2__ReadResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagValueArray(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ReadResponse(struct soap *soap, const char *tag, int id, const struct ns2__ReadResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ReadResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__TagValueArray(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ReadResponse * SOAP_FMAC4 soap_in_ns2__ReadResponse(struct soap *soap, const char *tag, struct ns2__ReadResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ReadResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ReadResponse, sizeof(struct ns2__ReadResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ReadResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagValueArray(soap, "result", &a->result, "ns2:TagValueArray"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__ReadResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ReadResponse, 0, sizeof(struct ns2__ReadResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ReadResponse(struct soap *soap, const struct ns2__ReadResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__ReadResponse);
	if (soap_out_ns2__ReadResponse(soap, tag?tag:"ns2:ReadResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ReadResponse * SOAP_FMAC4 soap_get_ns2__ReadResponse(struct soap *soap, struct ns2__ReadResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ReadResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__ReadResponse * SOAP_FMAC2 soap_instantiate_ns2__ReadResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ReadResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__ReadResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__ReadResponse);
		if (size)
			*size = sizeof(struct ns2__ReadResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__ReadResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__ReadResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__ReadResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ReadResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__ReadResponse %p -> %p\n", q, p));
	*(struct ns2__ReadResponse*)p = *(struct ns2__ReadResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RemoveSubscription(struct soap *soap, struct ns2__RemoveSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	soap_default_int(soap, &a->subId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RemoveSubscription(struct soap *soap, const struct ns2__RemoveSubscription *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RemoveSubscription(struct soap *soap, const char *tag, int id, const struct ns2__RemoveSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RemoveSubscription), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_int(soap, "subId", -1, &a->subId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RemoveSubscription * SOAP_FMAC4 soap_in_ns2__RemoveSubscription(struct soap *soap, const char *tag, struct ns2__RemoveSubscription *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_subId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RemoveSubscription *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RemoveSubscription, sizeof(struct ns2__RemoveSubscription), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RemoveSubscription(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_subId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "subId", &a->subId, "xsd:int"))
				{	soap_flag_subId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RemoveSubscription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RemoveSubscription, 0, sizeof(struct ns2__RemoveSubscription), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_subId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RemoveSubscription(struct soap *soap, const struct ns2__RemoveSubscription *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RemoveSubscription);
	if (soap_out_ns2__RemoveSubscription(soap, tag?tag:"ns2:RemoveSubscription", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RemoveSubscription * SOAP_FMAC4 soap_get_ns2__RemoveSubscription(struct soap *soap, struct ns2__RemoveSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RemoveSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RemoveSubscription * SOAP_FMAC2 soap_instantiate_ns2__RemoveSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RemoveSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RemoveSubscription, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RemoveSubscription);
		if (size)
			*size = sizeof(struct ns2__RemoveSubscription);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RemoveSubscription, n);
		if (size)
			*size = n * sizeof(struct ns2__RemoveSubscription);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RemoveSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RemoveSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RemoveSubscription %p -> %p\n", q, p));
	*(struct ns2__RemoveSubscription*)p = *(struct ns2__RemoveSubscription*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RemoveSubscriptionResponse(struct soap *soap, struct ns2__RemoveSubscriptionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RemoveSubscriptionResponse(struct soap *soap, const struct ns2__RemoveSubscriptionResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RemoveSubscriptionResponse(struct soap *soap, const char *tag, int id, const struct ns2__RemoveSubscriptionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RemoveSubscriptionResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RemoveSubscriptionResponse * SOAP_FMAC4 soap_in_ns2__RemoveSubscriptionResponse(struct soap *soap, const char *tag, struct ns2__RemoveSubscriptionResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RemoveSubscriptionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RemoveSubscriptionResponse, sizeof(struct ns2__RemoveSubscriptionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RemoveSubscriptionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RemoveSubscriptionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RemoveSubscriptionResponse, 0, sizeof(struct ns2__RemoveSubscriptionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RemoveSubscriptionResponse(struct soap *soap, const struct ns2__RemoveSubscriptionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RemoveSubscriptionResponse);
	if (soap_out_ns2__RemoveSubscriptionResponse(soap, tag?tag:"ns2:RemoveSubscriptionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RemoveSubscriptionResponse * SOAP_FMAC4 soap_get_ns2__RemoveSubscriptionResponse(struct soap *soap, struct ns2__RemoveSubscriptionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RemoveSubscriptionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RemoveSubscriptionResponse * SOAP_FMAC2 soap_instantiate_ns2__RemoveSubscriptionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RemoveSubscriptionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RemoveSubscriptionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RemoveSubscriptionResponse);
		if (size)
			*size = sizeof(struct ns2__RemoveSubscriptionResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RemoveSubscriptionResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__RemoveSubscriptionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RemoveSubscriptionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RemoveSubscriptionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RemoveSubscriptionResponse %p -> %p\n", q, p));
	*(struct ns2__RemoveSubscriptionResponse*)p = *(struct ns2__RemoveSubscriptionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RefreshSubscription(struct soap *soap, struct ns2__RefreshSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	soap_default_int(soap, &a->subId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RefreshSubscription(struct soap *soap, const struct ns2__RefreshSubscription *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RefreshSubscription(struct soap *soap, const char *tag, int id, const struct ns2__RefreshSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RefreshSubscription), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_int(soap, "subId", -1, &a->subId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RefreshSubscription * SOAP_FMAC4 soap_in_ns2__RefreshSubscription(struct soap *soap, const char *tag, struct ns2__RefreshSubscription *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_subId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RefreshSubscription *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RefreshSubscription, sizeof(struct ns2__RefreshSubscription), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RefreshSubscription(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_subId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "subId", &a->subId, "xsd:int"))
				{	soap_flag_subId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RefreshSubscription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RefreshSubscription, 0, sizeof(struct ns2__RefreshSubscription), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_subId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RefreshSubscription(struct soap *soap, const struct ns2__RefreshSubscription *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RefreshSubscription);
	if (soap_out_ns2__RefreshSubscription(soap, tag?tag:"ns2:RefreshSubscription", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RefreshSubscription * SOAP_FMAC4 soap_get_ns2__RefreshSubscription(struct soap *soap, struct ns2__RefreshSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RefreshSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RefreshSubscription * SOAP_FMAC2 soap_instantiate_ns2__RefreshSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RefreshSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RefreshSubscription, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RefreshSubscription);
		if (size)
			*size = sizeof(struct ns2__RefreshSubscription);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RefreshSubscription, n);
		if (size)
			*size = n * sizeof(struct ns2__RefreshSubscription);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RefreshSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RefreshSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RefreshSubscription %p -> %p\n", q, p));
	*(struct ns2__RefreshSubscription*)p = *(struct ns2__RefreshSubscription*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RefreshSubscriptionResponse(struct soap *soap, struct ns2__RefreshSubscriptionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RefreshSubscriptionResponse(struct soap *soap, const struct ns2__RefreshSubscriptionResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagValueArray(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RefreshSubscriptionResponse(struct soap *soap, const char *tag, int id, const struct ns2__RefreshSubscriptionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RefreshSubscriptionResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__TagValueArray(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RefreshSubscriptionResponse * SOAP_FMAC4 soap_in_ns2__RefreshSubscriptionResponse(struct soap *soap, const char *tag, struct ns2__RefreshSubscriptionResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RefreshSubscriptionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RefreshSubscriptionResponse, sizeof(struct ns2__RefreshSubscriptionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RefreshSubscriptionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagValueArray(soap, "result", &a->result, "ns2:TagValueArray"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RefreshSubscriptionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RefreshSubscriptionResponse, 0, sizeof(struct ns2__RefreshSubscriptionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RefreshSubscriptionResponse(struct soap *soap, const struct ns2__RefreshSubscriptionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RefreshSubscriptionResponse);
	if (soap_out_ns2__RefreshSubscriptionResponse(soap, tag?tag:"ns2:RefreshSubscriptionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__RefreshSubscriptionResponse * SOAP_FMAC4 soap_get_ns2__RefreshSubscriptionResponse(struct soap *soap, struct ns2__RefreshSubscriptionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RefreshSubscriptionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__RefreshSubscriptionResponse * SOAP_FMAC2 soap_instantiate_ns2__RefreshSubscriptionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RefreshSubscriptionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RefreshSubscriptionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__RefreshSubscriptionResponse);
		if (size)
			*size = sizeof(struct ns2__RefreshSubscriptionResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__RefreshSubscriptionResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__RefreshSubscriptionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__RefreshSubscriptionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RefreshSubscriptionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RefreshSubscriptionResponse %p -> %p\n", q, p));
	*(struct ns2__RefreshSubscriptionResponse*)p = *(struct ns2__RefreshSubscriptionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__AddSubscriptionItem(struct soap *soap, struct ns2__AddSubscriptionItem *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
	soap_default_int(soap, &a->subId);
	a->tagId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__AddSubscriptionItem(struct soap *soap, const struct ns2__AddSubscriptionItem *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__TagIdArray(soap, &a->tagId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AddSubscriptionItem(struct soap *soap, const char *tag, int id, const struct ns2__AddSubscriptionItem *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__AddSubscriptionItem), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	if (soap_out_int(soap, "subId", -1, &a->subId, ""))
		return soap->error;
	if (soap_out_PointerTons2__TagIdArray(soap, "tagId", -1, &a->tagId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__AddSubscriptionItem * SOAP_FMAC4 soap_in_ns2__AddSubscriptionItem(struct soap *soap, const char *tag, struct ns2__AddSubscriptionItem *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	size_t soap_flag_subId = 1;
	size_t soap_flag_tagId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__AddSubscriptionItem *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__AddSubscriptionItem, sizeof(struct ns2__AddSubscriptionItem), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__AddSubscriptionItem(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap_flag_subId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "subId", &a->subId, "xsd:int"))
				{	soap_flag_subId--;
					continue;
				}
			if (soap_flag_tagId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__TagIdArray(soap, "tagId", &a->tagId, "ns2:TagIdArray"))
				{	soap_flag_tagId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__AddSubscriptionItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__AddSubscriptionItem, 0, sizeof(struct ns2__AddSubscriptionItem), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0 || soap_flag_subId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__AddSubscriptionItem(struct soap *soap, const struct ns2__AddSubscriptionItem *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__AddSubscriptionItem);
	if (soap_out_ns2__AddSubscriptionItem(soap, tag?tag:"ns2:AddSubscriptionItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__AddSubscriptionItem * SOAP_FMAC4 soap_get_ns2__AddSubscriptionItem(struct soap *soap, struct ns2__AddSubscriptionItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__AddSubscriptionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__AddSubscriptionItem * SOAP_FMAC2 soap_instantiate_ns2__AddSubscriptionItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__AddSubscriptionItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__AddSubscriptionItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__AddSubscriptionItem);
		if (size)
			*size = sizeof(struct ns2__AddSubscriptionItem);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__AddSubscriptionItem, n);
		if (size)
			*size = n * sizeof(struct ns2__AddSubscriptionItem);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__AddSubscriptionItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AddSubscriptionItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__AddSubscriptionItem %p -> %p\n", q, p));
	*(struct ns2__AddSubscriptionItem*)p = *(struct ns2__AddSubscriptionItem*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__AddSubscriptionItemResponse(struct soap *soap, struct ns2__AddSubscriptionItemResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__AddSubscriptionItemResponse(struct soap *soap, const struct ns2__AddSubscriptionItemResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AddSubscriptionItemResponse(struct soap *soap, const char *tag, int id, const struct ns2__AddSubscriptionItemResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__AddSubscriptionItemResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__AddSubscriptionItemResponse * SOAP_FMAC4 soap_in_ns2__AddSubscriptionItemResponse(struct soap *soap, const char *tag, struct ns2__AddSubscriptionItemResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__AddSubscriptionItemResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__AddSubscriptionItemResponse, sizeof(struct ns2__AddSubscriptionItemResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__AddSubscriptionItemResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__AddSubscriptionItemResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__AddSubscriptionItemResponse, 0, sizeof(struct ns2__AddSubscriptionItemResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__AddSubscriptionItemResponse(struct soap *soap, const struct ns2__AddSubscriptionItemResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__AddSubscriptionItemResponse);
	if (soap_out_ns2__AddSubscriptionItemResponse(soap, tag?tag:"ns2:AddSubscriptionItemResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__AddSubscriptionItemResponse * SOAP_FMAC4 soap_get_ns2__AddSubscriptionItemResponse(struct soap *soap, struct ns2__AddSubscriptionItemResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__AddSubscriptionItemResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__AddSubscriptionItemResponse * SOAP_FMAC2 soap_instantiate_ns2__AddSubscriptionItemResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__AddSubscriptionItemResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__AddSubscriptionItemResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__AddSubscriptionItemResponse);
		if (size)
			*size = sizeof(struct ns2__AddSubscriptionItemResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__AddSubscriptionItemResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__AddSubscriptionItemResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__AddSubscriptionItemResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AddSubscriptionItemResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__AddSubscriptionItemResponse %p -> %p\n", q, p));
	*(struct ns2__AddSubscriptionItemResponse*)p = *(struct ns2__AddSubscriptionItemResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__CreateSubscription(struct soap *soap, struct ns2__CreateSubscription *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__unsignedByte(soap, &a->stationId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__CreateSubscription(struct soap *soap, const struct ns2__CreateSubscription *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CreateSubscription(struct soap *soap, const char *tag, int id, const struct ns2__CreateSubscription *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__CreateSubscription), type))
		return soap->error;
	if (soap_out_xsd__unsignedByte(soap, "stationId", -1, &a->stationId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__CreateSubscription * SOAP_FMAC4 soap_in_ns2__CreateSubscription(struct soap *soap, const char *tag, struct ns2__CreateSubscription *a, const char *type)
{
	size_t soap_flag_stationId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__CreateSubscription *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__CreateSubscription, sizeof(struct ns2__CreateSubscription), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__CreateSubscription(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_stationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedByte(soap, "stationId", &a->stationId, "xsd:unsignedByte"))
				{	soap_flag_stationId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__CreateSubscription *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__CreateSubscription, 0, sizeof(struct ns2__CreateSubscription), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_stationId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__CreateSubscription(struct soap *soap, const struct ns2__CreateSubscription *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__CreateSubscription);
	if (soap_out_ns2__CreateSubscription(soap, tag?tag:"ns2:CreateSubscription", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__CreateSubscription * SOAP_FMAC4 soap_get_ns2__CreateSubscription(struct soap *soap, struct ns2__CreateSubscription *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__CreateSubscription(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__CreateSubscription * SOAP_FMAC2 soap_instantiate_ns2__CreateSubscription(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__CreateSubscription(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__CreateSubscription, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__CreateSubscription);
		if (size)
			*size = sizeof(struct ns2__CreateSubscription);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__CreateSubscription, n);
		if (size)
			*size = n * sizeof(struct ns2__CreateSubscription);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__CreateSubscription*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CreateSubscription(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__CreateSubscription %p -> %p\n", q, p));
	*(struct ns2__CreateSubscription*)p = *(struct ns2__CreateSubscription*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__CreateSubscriptionResponse(struct soap *soap, struct ns2__CreateSubscriptionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__CreateSubscriptionResponse(struct soap *soap, const struct ns2__CreateSubscriptionResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CreateSubscriptionResponse(struct soap *soap, const char *tag, int id, const struct ns2__CreateSubscriptionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__CreateSubscriptionResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__CreateSubscriptionResponse * SOAP_FMAC4 soap_in_ns2__CreateSubscriptionResponse(struct soap *soap, const char *tag, struct ns2__CreateSubscriptionResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__CreateSubscriptionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__CreateSubscriptionResponse, sizeof(struct ns2__CreateSubscriptionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__CreateSubscriptionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__CreateSubscriptionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__CreateSubscriptionResponse, 0, sizeof(struct ns2__CreateSubscriptionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__CreateSubscriptionResponse(struct soap *soap, const struct ns2__CreateSubscriptionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__CreateSubscriptionResponse);
	if (soap_out_ns2__CreateSubscriptionResponse(soap, tag?tag:"ns2:CreateSubscriptionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__CreateSubscriptionResponse * SOAP_FMAC4 soap_get_ns2__CreateSubscriptionResponse(struct soap *soap, struct ns2__CreateSubscriptionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__CreateSubscriptionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__CreateSubscriptionResponse * SOAP_FMAC2 soap_instantiate_ns2__CreateSubscriptionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__CreateSubscriptionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__CreateSubscriptionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__CreateSubscriptionResponse);
		if (size)
			*size = sizeof(struct ns2__CreateSubscriptionResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__CreateSubscriptionResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__CreateSubscriptionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__CreateSubscriptionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CreateSubscriptionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__CreateSubscriptionResponse %p -> %p\n", q, p));
	*(struct ns2__CreateSubscriptionResponse*)p = *(struct ns2__CreateSubscriptionResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagValueArray(struct soap *soap, ns2__TagValueArray *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TagValueArray))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagValueArray(struct soap *soap, const char *tag, int id, ns2__TagValueArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TagValueArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__TagValueArray ** SOAP_FMAC4 soap_in_PointerTons2__TagValueArray(struct soap *soap, const char *tag, ns2__TagValueArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TagValueArray **)soap_malloc(soap, sizeof(ns2__TagValueArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TagValueArray *)soap_instantiate_ns2__TagValueArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__TagValueArray ** p = (ns2__TagValueArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TagValueArray, sizeof(ns2__TagValueArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagValueArray(struct soap *soap, ns2__TagValueArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__TagValueArray);
	if (soap_out_PointerTons2__TagValueArray(soap, tag?tag:"ns2:TagValueArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TagValueArray ** SOAP_FMAC4 soap_get_PointerTons2__TagValueArray(struct soap *soap, ns2__TagValueArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TagValueArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagIdArray(struct soap *soap, ns2__TagIdArray *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TagIdArray))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagIdArray(struct soap *soap, const char *tag, int id, ns2__TagIdArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TagIdArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__TagIdArray ** SOAP_FMAC4 soap_in_PointerTons2__TagIdArray(struct soap *soap, const char *tag, ns2__TagIdArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TagIdArray **)soap_malloc(soap, sizeof(ns2__TagIdArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TagIdArray *)soap_instantiate_ns2__TagIdArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__TagIdArray ** p = (ns2__TagIdArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TagIdArray, sizeof(ns2__TagIdArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagIdArray(struct soap *soap, ns2__TagIdArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__TagIdArray);
	if (soap_out_PointerTons2__TagIdArray(soap, tag?tag:"ns2:TagIdArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TagIdArray ** SOAP_FMAC4 soap_get_PointerTons2__TagIdArray(struct soap *soap, ns2__TagIdArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TagIdArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TagValue(struct soap *soap, ns2__TagValue *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TagValue))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TagValue(struct soap *soap, const char *tag, int id, ns2__TagValue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TagValue);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__TagValue ** SOAP_FMAC4 soap_in_PointerTons2__TagValue(struct soap *soap, const char *tag, ns2__TagValue **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TagValue **)soap_malloc(soap, sizeof(ns2__TagValue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TagValue *)soap_instantiate_ns2__TagValue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__TagValue ** p = (ns2__TagValue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TagValue, sizeof(ns2__TagValue), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TagValue(struct soap *soap, ns2__TagValue *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__TagValue);
	if (soap_out_PointerTons2__TagValue(soap, tag?tag:"ns2:TagValue", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TagValue ** SOAP_FMAC4 soap_get_PointerTons2__TagValue(struct soap *soap, ns2__TagValue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TagValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	int n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else if (!soap_in_int(soap, tag, &n, "xsd:int"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<int >, n);
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, std::vector<ns2__TagValue * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, const std::vector<ns2__TagValue * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<ns2__TagValue * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons2__TagValue(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, const char *tag, int id, const std::vector<ns2__TagValue * >*a, const char *type)
{
	for (std::vector<ns2__TagValue * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons2__TagValue(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns2__TagValue * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, const char *tag, std::vector<ns2__TagValue * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	ns2__TagValue *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns2__TagValue, SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue, sizeof(ns2__TagValue), 1))
				break;
			if (!soap_in_PointerTons2__TagValue(soap, tag, NULL, "ns2:TagValue"))
				break;
		}
		else if (!soap_in_PointerTons2__TagValue(soap, tag, &n, "ns2:TagValue"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons2__TagValue(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns2__TagValue * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons2__TagValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons2__TagValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns2__TagValue * >);
		if (size)
			*size = sizeof(std::vector<ns2__TagValue * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns2__TagValue * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns2__TagValue * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns2__TagValue * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__TagValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns2__TagValue * > %p -> %p\n", q, p));
	*(std::vector<ns2__TagValue * >*)p = *(std::vector<ns2__TagValue * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
