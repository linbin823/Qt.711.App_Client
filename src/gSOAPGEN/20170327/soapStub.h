/* soapStub.h
   Generated by gSOAP 2.8.14 from rdlite.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"urn:rdLite"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20814
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__TagValue
#define SOAP_TYPE_ns1__TagValue (11)
/* ns1:TagValue */
class SOAP_CMAC ns1__TagValue
{
public:
	unsigned int id;	/* required element of type xsd:unsignedInt */
	LONG64 time;	/* required element of type xsd:long */
	std::string *value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__TagValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TagValue() { ns1__TagValue::soap_default(NULL); }
	virtual ~ns1__TagValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TagValueArray
#define SOAP_TYPE_ns1__TagValueArray (12)
/* ns1:TagValueArray */
class SOAP_CMAC ns1__TagValueArray
{
public:
	int error;	/* required element of type xsd:int */
	std::vector<ns1__TagValue * >item;	/* optional element of type ns1:TagValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__TagValueArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TagValueArray() { ns1__TagValueArray::soap_default(NULL); }
	virtual ~ns1__TagValueArray() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TagIdArray
#define SOAP_TYPE_ns1__TagIdArray (13)
/* ns1:TagIdArray */
class SOAP_CMAC ns1__TagIdArray
{
public:
	std::vector<int >item;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__TagIdArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TagIdArray() { ns1__TagIdArray::soap_default(NULL); }
	virtual ~ns1__TagIdArray() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Read
#define SOAP_TYPE__ns1__Read (14)
/* ns1:Read */
class SOAP_CMAC _ns1__Read
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	ns1__TagIdArray *tagId;	/* required element of type ns1:TagIdArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns1__Read */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Read() { _ns1__Read::soap_default(NULL); }
	virtual ~_ns1__Read() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReadResponse
#define SOAP_TYPE__ns1__ReadResponse (15)
/* ns1:ReadResponse */
class SOAP_CMAC _ns1__ReadResponse
{
public:
	ns1__TagValueArray *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:TagValueArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__ReadResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReadResponse() { _ns1__ReadResponse::soap_default(NULL); }
	virtual ~_ns1__ReadResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Query
#define SOAP_TYPE__ns1__Query (16)
/* ns1:Query */
class SOAP_CMAC _ns1__Query
{
public:
	unsigned char stationId;	/* required element of type xsd:unsignedByte */
	ns1__TagIdArray *tagId;	/* required element of type ns1:TagIdArray */
	unsigned char valueType;	/* required element of type xsd:unsignedByte */
	LONG64 beginTime;	/* required element of type xsd:long */
	LONG64 endTime;	/* required element of type xsd:long */
	unsigned short count;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__Query */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Query() { _ns1__Query::soap_default(NULL); }
	virtual ~_ns1__Query() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryResponse
#define SOAP_TYPE__ns1__QueryResponse (17)
/* ns1:QueryResponse */
class SOAP_CMAC _ns1__QueryResponse
{
public:
	ns1__TagValueArray *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:TagValueArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns1__QueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryResponse() { _ns1__QueryResponse::soap_default(NULL); }
	virtual ~_ns1__QueryResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__Read
#define SOAP_TYPE___ns1__Read (32)
/* Operation wrapper: */
struct __ns1__Read
{
public:
	_ns1__Read *ns1__Read;	/* optional element of type ns1:Read */
public:
	int soap_type() const { return 32; } /* = unique id SOAP_TYPE___ns1__Read */
};
#endif

#ifndef SOAP_TYPE___ns1__Query
#define SOAP_TYPE___ns1__Query (36)
/* Operation wrapper: */
struct __ns1__Query
{
public:
	_ns1__Query *ns1__Query;	/* optional element of type ns1:Query */
public:
	int soap_type() const { return 36; } /* = unique id SOAP_TYPE___ns1__Query */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (37)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 37; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (38)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 38; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (40)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 40; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (43)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 43; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (44)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 44; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (10)
typedef unsigned char xsd__unsignedByte;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
