////////////////////////发数///////////////////////
public static bool flag = false;//flag=true:有通讯；flag=false:无通讯
        bool lastFlag = false;
        protected void sendData(object sender, ElapsedEventArgs e)
        {
            try 
            {
                //每个5s发送心跳11H
                dataPack.sent11H();

                //超过10s未收到服务器心跳，则再次收到心跳后发送订阅12H、刷新13H            
                string id = "00000701" + String.Format("{0:0000}", GlobalDataModel.ip4Num) + "0";
                if (GlobalDataModel.gkjPointMessage.Contains(id))
                {
                    var gkj = (GKJPointMessage)GlobalDataModel.gkjPointMessage[id];
                    if (gkj.beat1Satae())
                    {
                        flag = true;//有心跳
                    }
                    else
                    {
                        flag = false;//无心跳
                    }
                }
                if (flag != lastFlag)
                {
                    if (flag)
                    {
                        List<byte[]> list = new List<byte[]>();
                        ArrayList alist = dataPack.tagIdList;
                        int num = 0;
                        for (int i = 0; i < alist.Count; i++)
                        {
                            byte[] bytes = CRC.HexStringToByteArray(alist[i].ToString());
                            list.Add(bytes);
                            num++;
                            if (num > 125)
                            {
                                dataPack.sent12H(list);//发送订阅12H
                                list.Clear();
                                num = 0;
                            }
                        }
                        dataPack.sent12H(list);
                        dataPack.sent13H(); //发送刷新13H                   
                    }
                    lastFlag = flag;
                }
            }
            catch(Exception ex)
            {
                LogHelper.WriteLog(" exception msg: " + ex.ToString(), "发数错误[sendData]", LogLevel.High);
            }
            
        }


static public void sent12H(List<byte[]> list)
        {
            var config = GlobalDataModel.netConfig;
            if (SocketServers.Service.service().enableNET1)
            {
                byte[] data = pack12H(list);
                SocketServers.Service.service().local1.sentTo(data, new IPEndPoint(IPAddress.Parse(config.serverIP), config.serverPort));
            }
        }

 static public void sent13H()
        {
            var config = GlobalDataModel.netConfig;
            if (SocketServers.Service.service().enableNET1)
            {
                byte[] data = pack13H();
                SocketServers.Service.service().local1.sentTo(data, new IPEndPoint(IPAddress.Parse(config.serverIP), config.serverPort));
            }
        }


 public static byte[] pack12H(List<byte[]> list)
        {
            int dlen = list.Count*4;

            byte[] data = new byte[7+dlen];
            data[0] = 0x53;
            data[1] = 0x12;
            data[2] = (byte)GlobalDataModel.ip4Num;
            data[3] = (byte)((dlen >> 8) & 0xFF);
            data[4] = (byte)dlen;
            int j = 5;
            byte[] ipbyte = new byte[4];
            foreach (byte[] ddata in list)
            {
                ipbyte = ddata;
                ipbyte.CopyTo(data, j);
                j+=4;
            }
            data[7 + dlen-2] = CRC.daiMaHe(data.Skip(1).ToArray(), data.Length - 3);
            data[7 + dlen-1] = 0x0d;
            return data;
        }

        public static byte[] pack13H()
        {
            byte[] data = new byte[7];
            data[0] = 0x53;
            data[1] = 0x13;
            data[2] = (byte)GlobalDataModel.ip4Num;
            data[3] = 0;
            data[4] = 0;
            data[5] = CRC.daiMaHe(data.Skip(1).ToArray(), data.Length - 3);
            data[6] = 0x0d;
            return data;
        }


///////////////////////////收数///////////////////////////////
 override public bool handle(byte[] td, EndPoint end)
        {
            if (td.Length < 7) return false;
            _end = end;
            if (td[0] != 0x53) return false;
            
            //不是自己的数据不解析
            byte[] ipdata = td.Skip(2).Take(1).ToArray();            
            if ((short)ipdata[0] != GlobalDataModel.ip4Num) 
                return false;

            //和校验
            byte[] by = td.Skip(1).Take(td.Length - 3).ToArray();
            byte sum = CRC.daiMaHe(by, td.Length - 3);
            if (sum != td[td.Length - 2])
                return false;

            byte type = td[1];//命令
            switch (type)
            {
                case 0x01:
                    //  System.Console.WriteLine("time: {0},do handle",System.DateTime.Now.ToString());
                    return ceshiData(GlobalDataModel.ip4Num);
                case 0x14:
                    //数据块长度不符合不解析                    
                    byte[] tdlen = td.Skip(3).Take(2).ToArray();
                    Array.Reverse(tdlen);
                    int dlen = td.Length - 7;
                    int len = BitConverter.ToUInt16(tdlen, 0);
                    if (len != dlen)
                        return false;
                    byte[] data = td.Skip(5).Take(dlen).ToArray();//取出数据段部分
                    return jiankongData(data);                
                default:
                    break;
            }
            return false;
        }

 //01H
        protected bool ceshiData(int ip4Num) //心跳帧
        {           
            string id = "00000701"  +String.Format("{0:0000}", ip4Num) + "0";
            if (GlobalDataModel.gkjPointMessage.Contains(id))
            {
                var gkj = (GKJPointMessage)GlobalDataModel.gkjPointMessage[id];
                if (_netNum == 1)
                {
                    gkj.lastBeat1 = DateTime.Now;
                }
                else
                {
                    gkj.lastBeat2 = DateTime.Now;
                }
            }
            return false;
        }

protected bool jiankongData (byte[] data) //监控数据处理
		{
            int length = data.Length;            
            while (length>0)
            {
                byte[] id = data.Take(4).ToArray();
                byte[] l = data.Skip(4).Take(1).ToArray();
                string tagid = CRC.ByteArrayToHexString(id);
                short len = (short)l[0];
                byte[] value = data.Skip(5).Take(len).ToArray();
               // if (tagid == "010000A4" || tagid == "0100010A")
                   // LogHelper.WriteLog(">>tagid:" + tagid + "  len:" + len.ToString() + "  value:" + CRC.ByteArrayToHexString(value) + " test.", "test", LogLevel.High);
                unPack(tagid, len, value);//解析单个数据
                int num = 5 + len;
                data = data.Skip(num).ToArray();
                length -= num;
            }
			return false;
		}


 /// <summary>
        /// 解析单个数据
        /// </summary>
        /// <param name="tagid">TAGID</param>
        /// <param name="len">单个数据的字节长度</param>
        /// <param name="data">实测值</param>
        private void unPack(string tagid, short len, byte[] data)
        {
            // System.Console.WriteLine("time: {0},unPack , funcode : {1}", System.DateTime.Now.ToString(), funCode);
            //byte[] strTagId = BitConverter.GetBytes(tagid);
            DataTable dt = getCOMM_ID(tagid);
            string barcode = null;
            string dtype = "";
            float value = 0.0f;
            if (dt.Rows.Count == 0) return;
            
            barcode = dt.Rows[0]["COMM_ID"].ToString();
            dtype = dt.Rows[0]["DATATYPE"].ToString();
            Array.Reverse(data);
            switch (len)
            {
                case 1:
                    {
                        switch (dtype)
                        {
                            case "bool":
                            case "byte":
                                value = (short)data[0];
                                break;
                        }
                    }
                    break;
                case 2:
                    switch (dtype)
                    {
                        case "short":
                            value = BitConverter.ToInt16(data, 0);
                            break;
                        case "ushort":
                            value = BitConverter.ToUInt16(data, 0);
                            break;
                    }
                    break;
                case 4:
                    switch (dtype)
                    {
                        case "int":
                            value = BitConverter.ToInt32(data, 0);
                            break;
                        case "uint":
                            value = BitConverter.ToUInt32(data, 0);
                            break;
                        case "float":
                            value = BitConverter.ToSingle(data, 0);
                            break;
                    }
                    break;
                case 8:
                    switch (dtype)
                    {
                        case "int64":
                            value = BitConverter.ToInt64(data, 0);
                            break;
                        case "double":
                            value = (float)BitConverter.ToDouble(data, 0);//将double型强转成float
                            break;
                    }
                    break;
            }
            

            var map = GlobalDataModel.pointOrigalValue;
            PointOrigalValue pvalue;
            if (!map.Contains(barcode))
            {
                pvalue = new PointOrigalValue();
                pvalue.dirCode = 2;
                pvalue.code = barcode;
                pvalue.channel = int.Parse(barcode.Substring(14,3));
                pvalue.value = (int)value;
                pvalue.MAValue = value;
                pvalue.isRealValue = true;
                pvalue.lastUpdateTime = DateTime.Now;
                pvalue.realValue = value;
                map.Add(barcode, pvalue);
            }
            else
            {
                pvalue = (PointOrigalValue)map[barcode];
                if (pvalue.dirCode == -1)
                {
                    pvalue.dirCode = 2;
                    pvalue.code = barcode;
                    pvalue.channel = int.Parse(barcode.Substring(14, 3)); 
                }
                pvalue.value = (int)value;
                pvalue.MAValue = value;
                pvalue.isRealValue = true;
                pvalue.lastUpdateTime = DateTime.Now;
                pvalue.realValue = value;
            }
            

        }